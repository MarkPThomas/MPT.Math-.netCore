<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MPT.Math</name>
    </assembly>
    <members>
        <member name="T:MPT.Math.Algebra.AlgebraLibrary">
            <summary>
            Contains static methods for common algebraic operations.
            </summary>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.QuadraticFormula(System.Double,System.Double,System.Double)">
            <summary>
            Returns the 2 x solutions to the equation ax^2 + bx + c = 0.
            </summary>
            <param name="a">Multiplier to x^2.</param>
            <param name="b">Multiplier to x.</param>
            <param name="c">Constant.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArgumentException">Argument 'a' cannot be 0</exception>
            <exception cref="T:System.ArgumentException">'b^2 - 4 * a * c' cannot be negative</exception>
            <exception cref="T:System.ArgumentException">Argument 'a' cannot be 0</exception>
            <exception cref="T:System.ArgumentException">'b^2 - 4 * a * c' cannot be negative</exception>
            <exception cref="T:System.ArgumentException">Argument 'a' cannot be 0</exception>
            <exception cref="T:System.ArgumentException">'b^2 - 4 * a * c' cannot be negative</exception>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.CubicCurveLowestRoot(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the least positive solution to the equation ax^3 + bx^2 + cx + d = 0.
            From: https://mathworld.wolfram.com/CubicFormula.html
            </summary>
            <param name="a">Multiplier to x^3.</param>
            <param name="b">Multiplier to x^2.</param>
            <param name="c">Multiplier to x.</param>
            <param name="d">Constant.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.cubicCurveLeastRootNormalized(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the least positive solution to the equation x^3 + a2x^2 + a1x + a0 = 0.
            </summary>
            <param name="a0">The a0.</param>
            <param name="a1">Multiplier to x^2.</param>
            <param name="a2">Multiplier to x.</param>
            <param name="B">Derived constant.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.CubicCurveRoots(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the 3 'x' solutions to the equation ax^3 + bx^2 + cx + d = 0.
            From: https://mathworld.wolfram.com/CubicFormula.html
            </summary>
            <param name="a">Multiplier to x^3.</param>
            <param name="b">Multiplier to x^2.</param>
            <param name="c">Multiplier to x.</param>
            <param name="d">Constant.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.cubicCurveRootsNormalized(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the 3 'x' solutions to the equation x^3 + a2*x^2 + a1*x + a0 = 0.
            </summary>
            <param name="a0">Constant.</param>
            <param name="a1">Multiplier to x.</param>
            <param name="a2">Multiplier to x^2.</param>
            <param name="returnFirstRoot">if set to <c>true</c> [return first root].</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.InterpolationLinear(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Interpolates linearly between two values.
            </summary>
            <param name="value1">Value 1.</param>
            <param name="value2">Value 2.</param>
            <param name="value2Weight">The weight applied to the difference between value 1 and value 2.
            0 &lt;= weight &lt;= 1</param>
            <param name="tolerance">The tolerance used for determining if a weight lies within the inclusive range of 0 to 1.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Weight must be between 0 and 1. Weight provided was {value2Weight}</exception>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.InterpolationLinear(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double,System.Double)">
            <summary>
            Interpolates linearly between two points.
            </summary>
            <param name="point1">Point 1.</param>
            <param name="point2">Point 2.</param>
            <param name="point2Weight">The weight applied to the difference between point 1 and point 2.
            0 &lt;= weight &lt;= 1</param>
            <param name="tolerance">The tolerance used for determining if a weight lies within the inclusive range of 0 to 1.</param>
            <returns>CartesianCoordinate.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Weight must be between 0 and 1. Weight provided was {point2Weight}</exception>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.InterpolationLinear2D(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Lineary interpolates across a 2D plane to return an interpolated third dimensional value.
            Expected to be used for table interpolation, where x-axis are the columns, and y-axis are the rows.
            </summary>
            <param name="Po">The point in the plane to get the corresponding magnitude of.</param>
            <param name="ii">Point ii (closest to the origin), where <see paramref="iiValue" /> is the corresponding value.</param>
            <param name="jj">Point jj (farthest from the origin), where <see paramref="jjValue" /> property is the corresponding value.</param>
            <param name="iiValue">The value at point ii, which is closest to the origin.</param>
            <param name="ijValue">The value at point ij, which is in line with point ii but farthest along the x-axis (columns).</param>
            <param name="jiValue">The value at point ji, which is in line with point ii but farthest along the y-axis (rows).</param>
            <param name="jjValue">The value at point jj, which is farthest from the origin.</param>
            <param name="tolerance">The tolerance used for determining if a weight lies within the boundaries of the values being interpolated.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentException">Different columns must be chosen: Column ii = Column jj = {ii.X}</exception>
            <exception cref="T:System.ArgumentException">Different rows must be chosen: Row ii = Row jj = {ii.Y}</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Point ({Po.X}, {Po.Y}) must lie within the bounds of values to interpolate within, ({ii.X}, {ii.Y}), ({jj.X}, {jj.Y})</exception>
            <exception cref="T:System.ArgumentException">Different columns must be chosen: Column ii = Column jj = {ii.X}</exception>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.IntersectionX(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            X-coordinate of a horizontal line intersecting the line described by the points provided.
            </summary>
            <param name="y">Y-coordinate of the horizontal line.</param>
            <param name="I">First point.</param>
            <param name="J">Second point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.IntersectionX(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            X-coordinate of a horizontal line intersecting the line described by the points provided.
            </summary>
            <param name="y">Y-coordinate of the horizontal line.</param>
            <param name="x1">X-coordinate of first point.</param>
            <param name="y1">Y-coordinate of first point.</param>
            <param name="x2">X-coordinate of second point.</param>
            <param name="y2">Y-coordinate of second point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentException">Identical points provided. Points need to define a line.</exception>
            <exception cref="T:System.ArgumentException">Line is collinear to horizontal projection.</exception>
            <exception cref="T:System.ArgumentException">Line is parallel to horizontal projection.</exception>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.SRSS(System.Double[])">
            <summary>
            Performs the square root of the sum of the squares of the provided values.
            </summary>
            <param name="values">The values.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.CoordinateConverters.Cartesian2DPolarConverter">
            <summary>
            Class Cartesian2DPolarConverter.
            </summary>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.Cartesian2DPolarConverter.ToPolar(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Converts to Polar coordinates.
            </summary>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.Cartesian2DPolarConverter.ToCartesian(MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Converts to Cartesian coordinates.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.Angle">
            <summary>
            Represents an Angle based on a radian value.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.RadiansRaw">
            <summary>
            The raw angle as radians, without any modifications done.
            </summary>
            <value>The radians raw.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.DegreesRaw">
            <summary>
            The raw angle as degrees, without any modifications done.
            </summary>
            <value>The degrees raw.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.Tolerance">
            <summary>
            Default zero tolerance for operations.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.Radians">
            <summary>
            The angle as radians, which is a value between -π (clockwise) and +π (counter-clockwise).
            </summary>
            <value>The radians.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.ClockwiseRadians">
            <summary>
            The angle as clockwise (inverted) radians, which is a value between -π (counter-clockwise) and +π (clockwise).
            </summary>
            <value>The clockwise radians.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.Degrees">
            <summary>
            The angle as degrees, which is a value between -180 (clockwise) and +180 (counter-clockwise).
            </summary>
            <value>The degree.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.ClockwiseDegrees">
            <summary>
            The angle as clockwise (inverted) degrees, which is a value between -180 (counter-clockwise) and +180 (clockwise).
            </summary>
            <value>The clockwise degree.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.Angle" /> struct.
            </summary>
            <param name="radians">The radian value of the angle.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CreateFromRadian(System.Double,System.Double)">
            <summary>
            Creates an <see cref="T:MPT.Math.Coordinates.Angle" /> from a radian value.
            </summary>
            <param name="radians">The radian value of the angle.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CreateFromDegree(System.Double,System.Double)">
            <summary>
            Creates an <see cref="T:MPT.Math.Coordinates.Angle" /> from a degree value.
            </summary>
            <param name="degrees">The degree value of the angle.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CreateFromVector(MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Creates an <see cref="T:MPT.Math.Coordinates.Angle" /> from a direction vector.
            </summary>
            <param name="direction">The direction vector of the angle.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CreateFromPoint(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Creates an Angle from a point.
            The angle is assumed to lie between the origin, point, and positive horizontal axis.
            </summary>
            <param name="point">The point.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CreateFromPoints(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Creates an Angle from two points.
            The angle is assumed to lie between the line formed by the two points, and the positive horizontal axis.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The degrees.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.AsDegrees(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the positive angle [degrees] from the x-axis, counter-clockwise, of the coordinates.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.AsDegrees(System.Double,System.Double)">
            <summary>
            Returns the positive angle [degrees] from the x-axis, counter-clockwise, of the coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.AsRadians(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the positive angle [degrees] from the x-axis, counter-clockwise, of the coordinates.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.AsRadians(System.Double,System.Double)">
            <summary>
            Returns the positive angle [radians] from the x-axis, counter-clockwise, of the coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.WrapAngleWithinPositiveNegativePi(System.Double,System.Double)">
            <summary>
            Reduces a given angle to a value between -π and +π radians.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.WrapAngleWithinTwoPi(System.Double,System.Double)">
            <summary>
            Reduces a given angle to a value between 0 and 2π radians, matching the sign of the angle.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.Origin">
            <summary>
            Returns a default static coordinate at the origin.
            </summary>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.GetDirectionVector">
            <summary>
            Gets the direction vector, which is a normalized vector pointing to the direction of this angle.
            </summary>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.RotateVector(MPT.Math.Vectors.Vector)">
            <summary>
            Rotates the given Vector around the zero point.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.OffsetFrom(MPT.Math.Coordinates.Angle)">
            <summary>
            Returns the angular offset of the current angle from the provided angle.
            i.e. the current angle subtracting the provided angle.
            </summary>
            <param name="angleI">The angle i.</param>
            <returns>AngularOffset.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Equality(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Equality(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the == operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Equality(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the == operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Inequality(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Inequality(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the != operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Inequality(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the != operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThan(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThan(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThan(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThan(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThan(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThan(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThanOrEqual(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThanOrEqual(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThanOrEqual(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThanOrEqual(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThanOrEqual(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThanOrEqual(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Addition(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Addition(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the operator + for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Addition(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the operator + for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Subtraction(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Subtraction(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the operator - for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Subtraction(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the operator - for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Multiply(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the * operator for an angle and a double which represents a multiplier.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="angle">The angle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Multiply(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the * operator for an angle and a double which represents a multiplier.
            </summary>
            <param name="angle">The angle.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Division(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the / operator for an angle and a double which represents the denominator.
            </summary>
            <param name="angle">The angle.</param>
            <param name="denominator">The denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Explicit(MPT.Math.Coordinates.Angle)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:MPT.Math.Coordinates.Angle" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="a">Angle a.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Implicit(System.Double)~MPT.Math.Coordinates.Angle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:MPT.Math.Coordinates.Angle" />.
            </summary>
            <param name="radian">Angle in radians.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.Equals(MPT.Math.Coordinates.Angle)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CompareTo(MPT.Math.Coordinates.Angle)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CompareTo(System.Double)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.AngularOffset">
            <summary>
            Represents the angular difference between angles I (first) and J (second) in one-dimensional space.
            Implements the <see cref="T:System.IEquatable`1" />
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.AngularOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.AngularOffset.I">
            <summary>
            Gets or sets the first angular value.
            </summary>
            <value>The first angle.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.AngularOffset.J">
            <summary>
            Gets or sets the second angular value.
            </summary>
            <value>The second angle.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.#ctor(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.AngularOffset" /> struct.
            </summary>
            <param name="i">The first angle.</param>
            <param name="j">The second angle.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.AngularOffset" /> struct.
            </summary>
            <param name="deltaAngle">The angle offset from the origin axis.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.CreateFromPoints(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Creates an angular offset between 3 points.
            The sign of the offset is dependent upon the ordering of the points.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="point3">The point3.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.ToAngle">
            <summary>
            Converts to a single value.
            </summary>
            <returns>double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Explicit(MPT.Math.Coordinates.AngularOffset)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:MPT.Math.Coordinates.AngularOffset" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="a">Angle a.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Implicit(System.Double)~MPT.Math.Coordinates.AngularOffset">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:MPT.Math.Coordinates.AngularOffset" />.
            </summary>
            <param name="radian">Angle in radians.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.Delta">
            <summary>
            j - i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.LengthChord(System.Double)">
            <summary>
            The total straight length of the offset.
            </summary>
            <param name="radius">The radius to use with the angular offset.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.LengthArc(System.Double)">
            <summary>
            The total arc length of the offset.
            </summary>
            <param name="radius">The radius to use with the angular offset.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Equality(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Equality(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Equality(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the == operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Inequality(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Inequality(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Inequality(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the != operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThan(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThan(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThan(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThan(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThan(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThan(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThanOrEqual(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThanOrEqual(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThanOrEqual(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThanOrEqual(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThanOrEqual(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThanOrEqual(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Subtraction(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Subtraction(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="angle1">The angle1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Subtraction(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="angle2">The angle2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Addition(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Addition(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="angle1">The angle1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Addition(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="angle2">The angle2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Multiply(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Multiply(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Division(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">Denominator value.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.DivideByZeroException"></exception>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.Equals(MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.CompareTo(MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.CompareTo(System.Double)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.CartesianCoordinate">
            <summary>
            A two-dimensional coordinate system that specifies each point uniquely in a plane by a set of numerical coordinates, which are the signed distances to the point from two fixed perpendicular oriented lines, measured in the same unit of length.
            </summary>
            <seealso ref="https://en.wikipedia.org/wiki/Cartesian_coordinate_system"/>
            <seealso ref="https://en.wikipedia.org/wiki/Euclidean_space"/>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianCoordinate.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianCoordinate.X">
            <summary>
            Gets the x-coordinate.
            </summary>
            <value>The x-coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianCoordinate.Y">
            <summary>
            Gets the y-coordinate.
            </summary>
            <value>The y-coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.CartesianCoordinate"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.CrossProduct(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the cross product/determinant of the coordinates.
            x1*y2 - x2*y1
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.DotProduct(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the dot product of the coordinates.
            x1*x2 + y1*y2
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.OffsetFrom(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the cartesian offset of the current coordinate from the provided coordinate.
            i.e. the current coordinate subtracting the provided coordinate.
            </summary>
            <param name="coordinateI">The coordinate i.</param>
            <returns>AngularOffset.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.OffsetCoordinate(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Returns a new coordinate offset by the provided parameters.
            </summary>
            <param name="distance">The distance to offset.</param>
            <param name="rotation">The rotation.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.DistanceFromOrigin">
            <summary>
            The linear distance the coordinate is from the origin.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Origin">
            <summary>
            Returns a default static coordinate at the origin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.OffsetCoordinate(MPT.Math.Coordinates.CartesianCoordinate,System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Returns a new coordinate offset from the provided coordinate.
            </summary>
            <param name="distance">The distance to offset.</param>
            <param name="center">The center.</param>
            <param name="rotation">The rotation.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.RotateAboutPoint(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Rotates the the specified coordinate by the specified angle about a point.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="centerOfRotation">The center of rotation.</param>
            <param name="angleRadians">The angle [radians], where counter-clockwise is positive.</param>
            <returns>MPT.Math.Coordinates.CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Rotate(MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Rotates the specified coordinate by the specifed angle about the origin.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="angleRadians">The angle [radians], where counter-clockwise is positive.</param>
            <returns>MPT.Math.Coordinates.CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.ScaleFromPoint(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Scales the specified coordinate from the specified point.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="referencePoint">The reference point.</param>
            <param name="scale">The scale.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Scale(MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Scales the specified coordinate about the origin.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="scale">The scale.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.SkewWithinBox(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Skews the specified coordinate to the skewing of a containing box.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="stationaryReferencePoint">The stationary reference point of the skew box.</param>
            <param name="skewingReferencePoint">The skewing reference point of the skew box.</param>
            <param name="magnitude">The magnitude to skew along the x-axis and y-axis.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Skew(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Skews the specified coordinate about the origin.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="lambda">The magnitude to skew along the x-axis and y-axis.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Skew(MPT.Math.Coordinates.CartesianCoordinate,System.Double,System.Double)">
            <summary>
            Skews the specified coordinate about the origin.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="lambdaX">The magnitude to skew along the x-axis.</param>
            <param name="lambdaY">The magnitude to skew along the y-axis.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.MirrorAboutLine(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Curves.LinearCurve)">
            <summary>
            Mirrors the specified coordinate about the specified line.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="referenceLine">The reference line.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.MirrorAboutAxisX(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Mirrors the specified coordinate about the x-axis.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.MirrorAboutAxisY(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Mirrors the specified coordinate about the y-axis.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.ToPolar">
            <summary>
            Converts the cartesian coordinate to a polar coordinate.
            </summary>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Equality(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Inequality(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Equality(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.ICoordinate)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Inequality(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.ICoordinate)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Subtraction(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Addition(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Multiply(MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Multiply(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="coordinate">The coordinate.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Division(MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="denominator">The denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Implicit(MPT.Math.Coordinates.CartesianCoordinate)~MPT.Math.Coordinates.PolarCoordinate">
            <summary>
            Performs an implicit conversion from <see cref="T:MPT.Math.Coordinates.CartesianCoordinate"/> to <see cref="T:MPT.Math.Coordinates.PolarCoordinate"/>.
            </summary>
            <param name="cartesian">The cartesian.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Equals(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Equals(MPT.Math.Coordinates.ICoordinate)">
            <summary>
            Indicates whether the current object is equal to another object of the same ICoordinate interface.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.CartesianOffset">
            <summary>
            Represents the difference between Cartesian coordinates I (first) and J (second) in two-dimensional space.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianOffset.I">
            <summary>
            Gets or sets the first coordinate value.
            </summary>
            <value>The first coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianOffset.J">
            <summary>
            Gets or sets the second coordinate value.
            </summary>
            <value>The second coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.CartesianOffset"/> struct.
            </summary>
            <param name="i">The first coordinate.</param>
            <param name="j">The second coordinate.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.CartesianOffset"/> struct.
            </summary>
            <param name="deltaX">The x-axis offset from the origin.</param>
            <param name="deltaY">The y-axis offset from the origin.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.ToCartesianCoordinate">
            <summary>
            Converts to a single <see cref="T:MPT.Math.Coordinates.CartesianCoordinate"/> coordinate.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.ToPolar">
            <summary>
            Converts to polar offset.
            </summary>
            <returns>PolarOffset.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.X">
            <summary>
            Xj - Xi.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.Y">
            <summary>
            Yj - Yi.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.Length">
            <summary>
            The total straight length of the offset.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.SlopeAngle">
            <summary>
            The slope angle of the offset.
            </summary>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.Equals(MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Equality(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Inequality(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Subtraction(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Subtraction(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Subtraction(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Addition(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Addition(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Addition(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Multiply(MPT.Math.Coordinates.CartesianOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Multiply(System.Double,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Division(MPT.Math.Coordinates.CartesianOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">Denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Implicit(MPT.Math.Coordinates.CartesianOffset)~MPT.Math.Coordinates.PolarOffset">
            <summary>
            Performs an implicit conversion from <see cref="T:MPT.Math.Coordinates.CartesianOffset"/> to <see cref="T:MPT.Math.Coordinates.PolarOffset"/>.
            </summary>
            <param name="cartesian">The cartesian.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.ICoordinate">
            <summary>
            Interface ICoordinate
            </summary>
        </member>
        <member name="T:MPT.Math.Coordinates.LinearOffset">
            <summary>
            Represents the linear difference between coordinates I (first) and J (second) in one-dimensional space.
            Implements the <see cref="T:System.IEquatable`1" />
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.LinearOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.LinearOffset.I">
            <summary>
            Gets or sets the first coordinate value.
            </summary>
            <value>The first coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.LinearOffset.J">
            <summary>
            Gets or sets the second coordinate value.
            </summary>
            <value>The second coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.LinearOffset"/> struct.
            </summary>
            <param name="i">The first coordinate.</param>
            <param name="j">The second coordinate.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.ToValue">
            <summary>
            Converts to a single value.
            </summary>
            <returns>double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Explicit(MPT.Math.Coordinates.LinearOffset)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:MPT.Math.Coordinates.LinearOffset" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="a">Angle a.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Implicit(System.Double)~MPT.Math.Coordinates.LinearOffset">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:MPT.Math.Coordinates.LinearOffset" />.
            </summary>
            <param name="distance">Offset distance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.Delta">
            <summary>
            j - i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.Length">
            <summary>
            The total straight length of the offset.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Equality(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Equality(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Equality(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Inequality(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Inequality(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Inequality(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThan(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThan(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Offset a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThan(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThan(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThan(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Offset a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThan(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThanOrEqual(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThanOrEqual(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Offset a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThanOrEqual(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThanOrEqual(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThanOrEqual(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Offset a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThanOrEqual(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Subtraction(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Subtraction(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Subtraction(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Addition(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Addition(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Addition(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Multiply(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Multiply(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Division(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">Denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.Equals(MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.CompareTo(MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.CompareTo(System.Double)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.PolarCoordinate">
            <summary>
            A two-dimensional coordinate system in which each point on a plane is determined by a distance from a reference point and an angle from a reference direction. 
            Polar coordinates are points labeled (r,θ) and plotted on a polar grid.
            </summary>
            <seealso ref="https://en.wikipedia.org/wiki/Polar_coordinate_system"/>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.PolarCoordinate.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.PolarCoordinate.Radius">
            <summary>
            Gets the radius, r.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.PolarCoordinate.Azimuth">
            <summary>
            Gets the azimuth angle, φ.
            </summary>
            <value>The azimuth.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.#ctor(System.Double,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.PolarCoordinate"/> struct.
            </summary>
            <param name="radius">The distance from a reference point.</param>
            <param name="azimuth">The angle from a reference direction.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.PolarCoordinate"/> struct.
            </summary>
            <param name="radius">The distance from a reference point.</param>
            <param name="azimuth">The angle from a reference direction [radians].</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.AddAngleAzimuthRadians(System.Double)">
            <summary>
            Adds the angle, in radians, to the angle of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.SubtractAngleAzimuthRadians(System.Double)">
            <summary>
            Subtracts the angle, in radians, from the angle of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.AddAngleAzimuthDegrees(System.Double)">
            <summary>
            Adds the angle, in degrees, to the angle of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.SubtractAngleAzimuthDegrees(System.Double)">
            <summary>
            Subtracts the angle, in degrees, from the angle of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.MultiplyAngleAzimuthBy(System.Double)">
            <summary>
            Multiplies the angle of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.DivideAngleAzimuthBy(System.Double)">
            <summary>
            Divides the angle of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.changeAngleAzimuthRadians(System.Double)">
            <summary>
            Changes the angle of the current coordinate to the provided angle, in radians.
            </summary>
            <param name="angle">The new angle [radians].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.AddToRadius(System.Double)">
            <summary>
            Adds the amount to the radius of the current coordinate.
            </summary>
            <param name="value">The amount to add to the radius.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.SubtractFromRadius(System.Double)">
            <summary>
            Subtracts the amount from the radius of the current coordinate.
            </summary>
            <param name="value">The amount to subtract from the radius.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.MultiplyRadiusBy(System.Double)">
            <summary>
            Multiplies the radius of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.DivideRadiusBy(System.Double)">
            <summary>
            Divides the radius of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.changeRadius(System.Double)">
            <summary>
            Changes the radius of the current coordinate to the provided radius.
            </summary>
            <param name="radius">The new radius.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.ToCartesian">
            <summary>
            Converts the polar coordinate to a cartesian coordinate.
            </summary>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.Origin">
            <summary>
            Returns a default static coordinate at the origin.
            </summary>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.Equals(MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.Equals(MPT.Math.Coordinates.ICoordinate)">
            <summary>
            Indicates whether the current object is equal to another object of the same ICoordinate interface.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Equality(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Polar coordinate a.</param>
            <param name="b">Polar coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Inequality(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Polar coordinate a.</param>
            <param name="b">Polar coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Equality(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.ICoordinate)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Polar coordinate a.</param>
            <param name="b">Polar coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Inequality(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.ICoordinate)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Polar coordinate a.</param>
            <param name="b">Polar coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Multiply(MPT.Math.Coordinates.PolarCoordinate,System.Double)">
            <summary>
            Implements the * operator for a polar coordinate and a double which represents a multiplier.
            </summary>
            <param name="coordinate">Polar coordinate.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Multiply(System.Double,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the * operator for a polar coordinate and a double which represents a multiplier.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="coordinate">Polar coordinate.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Division(MPT.Math.Coordinates.PolarCoordinate,System.Double)">
            <summary>
            Implements the / operator for a polar coordinate and a double which represents a denominator.
            </summary>
            <param name="coordinate">Polar coordinate.</param>
            <param name="denominator">The denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Implicit(MPT.Math.Coordinates.PolarCoordinate)~MPT.Math.Coordinates.CartesianCoordinate">
            <summary>
            Performs an implicit conversion from <see cref="T:MPT.Math.Coordinates.PolarCoordinate"/> to <see cref="T:MPT.Math.Coordinates.CartesianCoordinate"/>.
            </summary>
            <param name="polar">The polar.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.PolarOffset">
            <summary>
            Represents the difference between polar coordinates I (first) and J (second) in two-dimensional space.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.PolarOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.PolarOffset.I">
            <summary>
            Gets or sets the first coordinate value.
            </summary>
            <value>The first coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.PolarOffset.J">
            <summary>
            Gets or sets the second coordinate value.
            </summary>
            <value>The second coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.#ctor(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.CartesianOffset"/> struct.
            </summary>
            <param name="i">The first coordinate.</param>
            <param name="j">The second coordinate.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.ToCartesian">
            <summary>
            Converts to cartesian offset.
            </summary>
            <returns>CartesianOffset.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Radius">
            <summary>
            Radius_j - Radius_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Azimuth">
            <summary>
            Azimuth_j - Azimuth_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Length">
            <summary>
            The total straight length between the offset points.
            <seealso ref="https://www.ck12.org/book/ck-12-trigonometry-concepts/section/6.2/"/>
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Equals(MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Equality(MPT.Math.Coordinates.PolarOffset,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Inequality(MPT.Math.Coordinates.PolarOffset,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Subtraction(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Subtraction(MPT.Math.Coordinates.PolarOffset,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Addition(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Addition(MPT.Math.Coordinates.PolarOffset,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Multiply(MPT.Math.Coordinates.PolarOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Multiply(System.Double,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Division(MPT.Math.Coordinates.PolarOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">The denominator.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Implicit(MPT.Math.Coordinates.PolarOffset)~MPT.Math.Coordinates.CartesianOffset">
            <summary>
            Performs an implicit conversion from <see cref="T:MPT.Math.Coordinates.PolarOffset"/> to <see cref="T:MPT.Math.Coordinates.CartesianOffset"/>.
            </summary>
            <param name="polar">The polar.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:MPT.Math.Curves.BezierCurve">
            <summary>
            Class BezierCurve.
            Implements the <see cref="T:MPT.Math.Curves.Curve" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Curve" />
        </member>
        <member name="F:MPT.Math.Curves.BezierCurve._maxNumberOfControlPoints">
            <summary>
            The maximum number of control points.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.BezierCurve.NumberOfControlPoints">
            <summary>
            Gets the number of control points.
            </summary>
            <value>The number of control points.</value>
        </member>
        <member name="P:MPT.Math.Curves.BezierCurve.HandleI">
            <summary>
            Gets the handle at starting point, i.
            </summary>
            <value>The handle i.</value>
        </member>
        <member name="P:MPT.Math.Curves.BezierCurve.HandleJ">
            <summary>
            Gets the handle at ending point, j.
            </summary>
            <value>The handle j.</value>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.#ctor(MPT.Math.Curves.Tools.CurveHandle,MPT.Math.Curves.Tools.CurveHandle,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.BezierCurve"/> class.
            </summary>
            <param name="handleStart">The handle start.</param>
            <param name="handleEnd">The handle end.</param>
            <param name="numberOfControlPoints">The number of control points.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.BezierCurve"/> class.
            </summary>
            <param name="pointI">The point i.</param>
            <param name="pointJ">The point j.</param>
            <param name="numberOfControlPoints">The number of control points.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.#ctor(System.Double,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.BezierCurve"/> class.
            </summary>
            <param name="length">The length.</param>
            <param name="numberOfControlPoints">The number of control points.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.getCurveHandleJ(MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Gets the bezier curve handle j, with appropriate slope defaults.
            </summary>
            <param name="pointJ">The point j.</param>
            <param name="handleLength">Length of the handle.</param>
            <returns>CurveHandle.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.getHandleLength(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Gets the length of the handle for handles at the control points.
            </summary>
            <param name="pointI">The point i.</param>
            <param name="pointJ">The point j.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.getNumberOfControlPoints(System.Int32)">
            <summary>
            Gets the number of control points.
            </summary>
            <param name="numberOfControlPoints">The number of control points.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.createParametricEquation">
            <summary>
            Creates the parametric vector.
            </summary>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.SlopeByPosition(System.Double)">
            <summary>
            Slope of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="relativePosition">The relative position, s. Relative position must be between 0 and 1.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.CurvatureByPosition(System.Double)">
            <summary>
            Curvature of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="relativePosition">The relative position, s. Relative position must be between 0 and 1.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.TangentVectorByPosition(System.Double)">
            <summary>
            Vector that is tangential to the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="relativePosition">The relative position, s. Relative position must be between 0 and 1.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.NormalVectorByPosition(System.Double)">
            <summary>
            Vector that is tangential to the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="relativePosition">The relative position, s. Relative position must be between 0 and 1.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.Length">
            <summary>
            Length of the curve between the limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.LengthBetween(System.Double,System.Double)">
            <summary>
            Length of the curve between two points.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started. Relative position must be between 0 and 1.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended. Relative position must be between 0 and 1.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.ChordLength">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.ChordLengthBetween(System.Double,System.Double)">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started. Relative position must be between 0 and 1.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended. Relative position must be between 0 and 1.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.Chord">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.ChordBetween(System.Double,System.Double)">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started. Relative position must be between 0 and 1.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended. Relative position must be between 0 and 1.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            </summary>
            <param name="relativePosition">The relative position, s. Relative position must be between 0 and 1.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.NormalVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            </summary>
            <param name="relativePosition">The relative position, s. Relative position must be between 0 and 1.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.CoordinateCartesian(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            </summary>
            <param name="relativePosition">The relative position, s. Relative position must be between 0 and 1.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.CoordinatePolar(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.XatY(System.Double)">
            <summary>
            X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.YatX(System.Double)">
            <summary>
            Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.XsAtY(System.Double)">
            <summary>
            X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.YsAtX(System.Double)">
            <summary>
            Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.IsIntersectingCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if [is intersecting coordinate] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.CoordinateByPosition(System.Double)">
            <summary>
            The cartesian coordinate on the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="relativePosition">The relative position, s. Relative position must be between 0 and 1.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.B_0">
            <summary>
            bs the 0.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.B_1">
            <summary>
            bs the 1.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.B_2">
            <summary>
            bs the 2.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.B_3">
            <summary>
            bs the 3.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.BezierCurve.CloneCurve">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.CircularCurve">
            <summary>
            Class CircularCurve.
            Implements the <see cref="T:MPT.Math.Curves.ConicSectionEllipticCurve" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.ConicSectionEllipticCurve" />
        </member>
        <member name="P:MPT.Math.Curves.CircularCurve.DistanceFromFocusToLocalOrigin">
            <summary>
            Distance from local origin to the focus, c.
            </summary>
            <value>The distance from focus to origin.</value>
        </member>
        <member name="P:MPT.Math.Curves.CircularCurve.Center">
            <summary>
            Gets the center control point.
            </summary>
            <value>The center control point</value>
        </member>
        <member name="P:MPT.Math.Curves.CircularCurve.Radius">
            <summary>
            Gets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:MPT.Math.Curves.CircularCurve.Curvature">
            <summary>
            Gets the curvature.
            </summary>
            <value>The curvature.</value>
        </member>
        <member name="P:MPT.Math.Curves.CircularCurve.Eccentricity">
            <summary>
            The eccentricity, e.
            A measure of how much the conic section deviates from being circular.
            Distance from any point on the conic section to its focus, divided by the perpendicular distance from that point to the nearest directrix.
            </summary>
            <value>The eccentricity.</value>
        </member>
        <member name="P:MPT.Math.Curves.CircularCurve.SemilatusRectumDistance">
            <summary>
            Distance from the focus to the curve along a line perpendicular to the major axis and the focus, p.
            </summary>
            <value>The p.</value>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.CircularCurve" /> class.
            </summary>
            <param name="vertex">Any vertex on the curve.</param>
            <param name="center">The center.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.#ctor(System.Double,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.CircularCurve" /> class.
            </summary>
            <param name="radius">The radius.</param>
            <param name="center">The center.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.XatY(System.Double)">
            <summary>
            +X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.YatX(System.Double)">
            <summary>
            +Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.HasChord">
            <summary>
            Determines whether this instance has a chord.
            </summary>
            <returns><c>true</c> if this instance has a chord; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.IsCircle">
            <summary>
            Determines whether this instance is a circle.
            </summary>
            <returns><c>true</c> if this instance is a circle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.IsIntersecting(MPT.Math.Curves.CircularCurve)">
            <summary>
            Determines whether the specified curve is intersecting.
            </summary>
            <param name="curve">The curve.</param>
            <returns><c>true</c> if the specified curve is intersecting; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.IsTangent(MPT.Math.Curves.CircularCurve)">
            <summary>
            Determines whether the specified curve is tangent.
            </summary>
            <param name="curve">The curve.</param>
            <returns><c>true</c> if the specified curve is tangent; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.RadiusAboutFocusRight(System.Double)">
            <summary>
            The radius measured from the right focus (+X) as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.radiusAboutFocusRightPrime(System.Double)">
            <summary>
            The differential change in radius corresponding with a differential change in the angle, measured from the right focus (+X) as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.RadiusAboutVertexMajorRight(System.Double)">
            <summary>
            The radius measured from the right (+X) major vertex as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.RadiusAboutFocusLeft(System.Double)">
            <summary>
            The radius measured from the left focus (-X) as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.RadiusAboutVertexMajorLeft(System.Double)">
            <summary>
            The radius measured from the left (-X) major vertex as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.RadiusAboutOrigin(System.Double)">
            <summary>
            The radius measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.CurvatureByAngle(System.Double)">
            <summary>
            Curvature of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.IntersectionCoordinate(MPT.Math.Curves.LinearCurve)">
            <summary>
            Returns points where the circular curve intersects the provided linear curve.
            </summary>
            <param name="otherLine">Linear curve that intersects the current linear curve.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.IntersectionCoordinate(MPT.Math.Curves.CircularCurve)">
            <summary>
            Returns points where the circular curve intersects the provided circular curve.
            </summary>
            <param name="otherLine">Circular curve that intersects the current circular curve.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.CoordinateOfPerpendicularProjection(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Coordinate of where a perpendicular projection intersects the provided coordinate.
            Returns infinity if the point is coincident with the circular curve center.
            </summary>
            <param name="point">The point.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.LengthBetween(MPT.Math.Coordinates.AngularOffset)">
            <summary>
            The length within the provided rotation along a circular curve.
            </summary>
            <param name="rotation">Rotation to get arc length between.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.Length">
            <summary>
            Length of the curve between the limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.LengthBetween(System.Double,System.Double)">
            <summary>
            Length of the curve between two points.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative length along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.NormalVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative length along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.CoordinatePolar(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.XsAtY(System.Double)">
            <summary>
            X-coordinates on the curve that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which x-coordinates are desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.YsAtX(System.Double)">
            <summary>
            Y-coordinates on the curve that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which y-coordinates are desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.IsIntersectingCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if [is intersecting coordinate] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.RadiiAboutOrigin(System.Double)">
            <summary>
            The radii measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.LengthBetween(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            The length between the provided points along a circular curve, assumed to be about the origin.
            </summary>
            <param name="pointI">Point i.</param>
            <param name="pointJ">Point j.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.LengthBetween(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            The length between the provided points along a circular curve.
            </summary>
            <param name="pointI">Point i.</param>
            <param name="pointJ">Point j.</param>
            <param name="radius">Arc radius</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.LengthBetween(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            The length within the provided rotation along a circular curve.
            </summary>
            <param name="rotation">Rotation to get arc length between.</param>
            <param name="radius">Arc radius</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.AreTangent(MPT.Math.Curves.CircularCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            Determines if the curves are tangent to each other.
            </summary>
            <param name="curve1">The curve1.</param>
            <param name="curve2">The curve2.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.AreIntersecting(MPT.Math.Curves.CircularCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            Determines if the curves intersect each other.
            </summary>
            <param name="curve1">The curve1.</param>
            <param name="curve2">The curve2.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.CoordinateOfPerpendicularProjection(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Curves.CircularCurve)">
            <summary>
            Coordinate of where a perpendicular projection intersects the provided coordinate.
            Returns infinity if the point is coincident with the circular curve center.
            </summary>
            <param name="point">The point.</param>
            <param name="referenceArc">The line to which a perpendicular projection is drawn.</param>
            <returns>CartesianCoordinate.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.vertexMajor(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Gets the major vertex.
            </summary>
            <param name="radius">The radius.</param>
            <param name="center">The center.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.getLocalOrigin">
            <summary>
            The coordinate of the local origin.
            </summary>
            <value>The local origin.</value>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.CircularCurve.CloneCurve">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.ConicSectionCurve">
            <summary>
            A conic section (or simply conic) is a curve obtained as the intersection of the surface of a cone with a plane; the three types are parabolas, ellipses (circles are a subtype), and hyperbolas.
            A conic section is the locus of points P whose distance to the focus is a constant multiple of the distance from P to the directrix of the conic.
            <a href="https://courses.lumenlearning.com/boundless-algebra/chapter/introduction-to-conic-sections">Reference</a>. 
            <a href="https://en.wikipedia.org/wiki/Conic_section">Wikipedia</a>
            Implements the <see cref="T:MPT.Math.Curves.Curve" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Curve" />
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="F:MPT.Math.Curves.ConicSectionCurve._radiusFromRightFocus">
            <summary>
            The parametric equation of the radius measured from the focus.
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.ConicSectionCurve._rotation">
            <summary>
            The rotational offset of local coordinates from global coordinates.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.Rotation">
            <summary>
            Gets the rotational offset of local coordinates from global coordinates.
            </summary>
            <value>The local off set rotation.</value>
        </member>
        <member name="F:MPT.Math.Curves.ConicSectionCurve._localOrigin">
            <summary>
            The local origin
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.LocalOrigin">
            <summary>
            The coordinate of the local origin.
            </summary>
            <value>The local origin.</value>
        </member>
        <member name="F:MPT.Math.Curves.ConicSectionCurve._vertexMajor">
            <summary>
            The major vertex. This is taken to be the left apex of circles and ellpses, the right apex of hyperbolas, and the sole apex of parabolas.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.VerticesMajor">
            <summary>
            Gets the major vertices, M, which are the points on a conic section that lie closest to the directrices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.DistanceFromVertexMajorToLocalOrigin">
            <summary>
            Distance, a, from local origin to major vertex.
            </summary>
            <value>a.</value>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.VerticesMinor">
            <summary>
            Gets the minor vertices, m, which lie along a line perpendicular to a line passing through the major vertex, M, and focus, f.
            </summary>
            <value>The conjugate vertices.</value>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.DistanceFromVertexMinorToMajorAxis">
            <summary>
            Distance, b, from the major axis to minor vertex, m.
            </summary>
            <value>The b.</value>
        </member>
        <member name="F:MPT.Math.Curves.ConicSectionCurve._focus">
            <summary>
            The focus.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.Focus">
            <summary>
            Gets the focus, f.
            </summary>
            <value>The focus.</value>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.DistanceFromFocusToLocalOrigin">
            <summary>
            Distance, c, from local origin to the focus, f.
            </summary>
            <value>The distance from focus to origin.</value>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.DistanceFromFocusToDirectrix">
            <summary>
            Distance, Xe, from the focus to the directrix.
            </summary>
            <value>The distance from focus to directrix.</value>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.Eccentricity">
            <summary>
            The eccentricity, e.
            A measure of how much the conic section deviates from being circular.
            Distance from any point on the conic section to its focus, divided by the perpendicular distance from that point to the nearest directrix.
            e = c / a;
            </summary>
            <value>The eccentricity.</value>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.Directrix">
            <summary>
            Gets the directrix, Xe.
            </summary>
            <value>The directrix.</value>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.DistanceFromDirectrixToLocalOrigin">
            <summary>
            Distance from local origin to the directrix line, Xe.
            </summary>
            <value>The distance from directrix to origin.</value>
        </member>
        <member name="P:MPT.Math.Curves.ConicSectionCurve.SemilatusRectumDistance">
            <summary>
            Distance, p, from the focus to the curve along a line perpendicular to the major axis and the focus.
            </summary>
            <value>The p.</value>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.ConicSectionCurve" /> class.
            </summary>
            <param name="vertexMajor">The major vertex, M. 
            This is taken to be the left apex of circles and ellipses, the right apex of hyperbolas, and the sole apex of parabolas.</param>
            <param name="focus">The focus, f.</param>
            <param name="distanceFromLocalOriginToMajorVertex">Distance, a, from local origin to major vertex, M.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.#ctor(MPT.Math.Coordinates.CartesianCoordinate,System.Double,System.Double,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.ConicSectionCurve"/> class.
            </summary>
            <param name="vertexMajor">The vertex major.</param>
            <param name="distanceFromMajorVertexToFocus">The distance from major vertex, M, to focus, f.</param>
            <param name="distanceFromMajorVertexToLocalOrigin">Distance, a, major vertex, M, to the local origin.</param>
            <param name="rotation">The rotation offset from the horizontal x-axis.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.initialize(MPT.Math.Coordinates.CartesianCoordinate,System.Double,System.Double)">
            <summary>
            Initializes the specified properties.
            </summary>
            <param name="vertexMajor">The major vertex, M.</param>
            <param name="distanceFromMajorVertexToLocalOrigin">The distance from the major vertex, M, to the local origin.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.setTolerances(System.Double)">
            <summary>
            Sets the tolerances.
            </summary>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.SemilatusRectum">
            <summary>
            The vertices, p, that lie on the curve along a line perpendicular to the major axis and the focus.
            </summary>
            <returns>Tuple&lt;CartesianCoordinate, CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RadiusAboutFocusRight(MPT.Math.Coordinates.Angle)">
            <summary>
            The radius measured from the right focus (+X) as a function of the angle in local coordinates.
            </summary>
            <param name="angle">The angle in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RadiusAboutFocusRight(System.Double)">
            <summary>
            The radius measured from the right focus (+X) as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.radiusAboutFocusRightPrime(System.Double)">
            <summary>
            The differential change in radius corresponding with a differential change in the angle, measured from the right focus (+X) as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RadiusAboutVertexMajorRight(System.Double)">
            <summary>
            The radius measured from the right (+X) major vertex as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RadiusAboutFocusLeft(MPT.Math.Coordinates.Angle)">
            <summary>
            The radius measured from the left focus (-X) as a function of the angle in local coordinates.
            </summary>
            <param name="angle">The angle in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RadiusAboutFocusLeft(System.Double)">
            <summary>
            The radius measured from the left focus (-X) as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RadiusAboutVertexMajorLeft(System.Double)">
            <summary>
            The radius measured from the left (-X) major vertex as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RadiusAboutOffset(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            The radius measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <param name="offset">The offst of the shape center/origin from the coordinate origin.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.SlopeByAngle(System.Double)">
            <summary>
            Slope of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.CurvatureByAngle(System.Double)">
            <summary>
            Curvature of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.TangentialAngleByAngle(System.Double)">
            <summary>
            Tangential angle of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.PolarTangentialAngleAboutByAngle(System.Double)">
            <summary>
            Angle between the tangent of the curve and the radius connecting the origin to the point considered. 
            This is in local coordinates about the local origin that corresponds to the parametric coordinate given.
            <a href="https://planetmath.org/polartangentialangle">Reference</a> &amp; <a href="https://www.youtube.com/watch?v=6RwOoPN2zqE">Video</a>.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.TangentVectorByAngle(System.Double)">
            <summary>
            Vector that is tangential to the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.NormalVectorByAngle(System.Double)">
            <summary>
            Vector that is tangential to the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.CoordinateByAngle(MPT.Math.Coordinates.Angle)">
            <summary>
            The cartesian coordinate on the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angle">Angle of rotation about the local origin</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.CoordinateByAngle(System.Double)">
            <summary>
            The cartesian coordinate on the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the local origin, in radians.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.XbyRotationAboutFocusRight(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the right (+X) focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the right (+X) focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.YbyRotationAboutFocusRight(System.Double)">
            <summary>
            Y-coordinate on the curve in local coordinates about the right (+X) focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the right (+X) focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RotationAboutOriginByRotationAboutFocusRight(System.Double)">
            <summary>
            The angle about the origin, in radians, determined by the angle about the right focus.
            </summary>
            <param name="angleRadians">Angle of rotation about the right (+X) focus, in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RotationAboutFocusRightByRotationAboutOrigin(System.Double)">
            <summary>
            The angle about the right (+X) focus, in radians, determined by the angle about the origin.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.XbyRotationAboutFocusLeft(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the left (-X) focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the left (-X) focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.YbyRotationAboutFocusLeft(System.Double)">
            <summary>
            Y-coordinate on the curve in local coordinates about the left (-X) focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the left (-X) focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RotationAboutOriginByRotationAboutFocusLeft(System.Double)">
            <summary>
            The angle about the origin, in radians, determined by the angle about the right focus.
            </summary>
            <param name="angleRadians">Angle of rotation about the left (-X) focus, in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RotationAboutFocusLeftByRotationAboutOrigin(System.Double)">
            <summary>
            The angle about the left (-X) focus, in radians, determined by the angle about the origin.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.getLocalOrigin">
            <summary>
            The coordinate of the local origin.
            </summary>
            <value>The local origin.</value>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.getVertexMajor2">
            <summary>
            Gets the vertex major2 coordinate.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.getVerticesMinor">
            <summary>
            Gets the minor vertices.
            </summary>
            <returns>Tuple&lt;CartesianCoordinate, CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.getVerticesMinor(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Gets the minor vertices.
            </summary>
            <param name="point">The point that the minor vertices are offset from.</param>
            <returns>Tuple&lt;CartesianCoordinate, CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.getVerticesDirectrix">
            <summary>
            Gets the directrix vertices.
            </summary>
            <returns>Tuple&lt;CartesianCoordinate, CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.distanceFromFocusToVertexMajor">
            <summary>
            Distance from the focus to major vertex.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.distanceFromVertexMinorToMajorAxis(System.Double,System.Double)">
            <summary>
            Distance, b, from local origin to minor Vertex, b.
            </summary>
            <param name="a">Distance, a, from local origin to major vertex, M.</param>
            <param name="c">Distance, c, from local origin to the focus, f.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RadiusAboutOrigin(System.Double)">
            <summary>
            The radius measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.RadiiAboutOrigin(System.Double)">
            <summary>
            The radii measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.XatY(System.Double)">
            <summary>
            X-coordinate on the curve that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.YatX(System.Double)">
            <summary>
            Y-coordinate on the curve that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which y-coordinates are desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.XsAtY(System.Double)">
            <summary>
            X-coordinates on the curve that correspond to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which x-coordinates are desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.YsAtX(System.Double)">
            <summary>
            Y-coordinates on the curve that correspond to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.IsIntersectingCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if [is intersecting coordinate] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.Length">
            <summary>
            Length of the line segment.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.LengthBetween(System.Double,System.Double)">
            <summary>
            Length of the curve between two points.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.ChordLength">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.ChordLengthBetween(System.Double,System.Double)">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.Chord">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.ChordBetween(System.Double,System.Double)">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the linear curve is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the linear curve is ended.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.NormalVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.CoordinateCartesian(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionCurve.CoordinatePolar(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:MPT.Math.Curves.ConicSectionEllipticCurve">
            <summary>
            Conic section curves that may form closed shapes.
            Implements the <see cref="T:MPT.Math.Curves.ConicSectionCurve" />
            Implements the <see cref="T:MPT.Math.Curves.ICurveLimits" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.ConicSectionCurve" />
            <seealso cref="T:MPT.Math.Curves.ICurveLimits" />
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.#ctor(MPT.Math.Coordinates.CartesianCoordinate,System.Double,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.ConicSectionEllipticCurve" /> class.
            </summary>
            <param name="vertexMajor">The major vertex, a.</param>
            <param name="distanceFromFocusToLocalOrigin">The distance from focus, c, to local origin.</param>
            <param name="localOrigin">The coordinate of the local origin.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.createParametricEquation">
            <summary>
            Creates the parametric vector.
            </summary>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.IsClosedCurve">
            <summary>
            Determines whether [is closed curve].
            </summary>
            <returns><c>true</c> if [is closed curve]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.ChordLength">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.ChordLengthBetween(System.Double,System.Double)">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.Chord">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.ChordBetween(System.Double,System.Double)">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the linear curve is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the linear curve is ended.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.RadiusAboutFocusRight(System.Double)">
            <summary>
            The radius measured from the right focus (+X) as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.radiusAboutFocusRightPrime(System.Double)">
            <summary>
            The differential change in radius corresponding with a differential change in the angle, measured from the right focus (+X) as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.RadiusAboutVertexMajorRight(System.Double)">
            <summary>
            The radius measured from the right (+X) major vertex as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.RadiusAboutFocusLeft(System.Double)">
            <summary>
            The radius measured from the left focus (-X) as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.RadiusAboutVertexMajorLeft(System.Double)">
            <summary>
            The radius measured from the left (-X) major vertex as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.SlopeAtX(System.Double)">
            <summary>
            Slope of the curve in local coordinates about the local origin that corresponds to the x-coordinate given.
            </summary>
            <param name="x">x-coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.SlopeAtY(System.Double)">
            <summary>
            Slope of the curve in local coordinates about the local origin that corresponds to the y-coordinate given.
            </summary>
            <param name="y">y-coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.SlopeByAngle(System.Double)">
            <summary>
            Slope of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.LengthBetween(MPT.Math.Coordinates.AngularOffset)">
            <summary>
            The length within the provided rotation along an elliptical curve.
            </summary>
            <param name="rotation">Rotation to get arc length between.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.XatY(System.Double)">
            <summary>
            +X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which a +x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.YatX(System.Double)">
            <summary>
            +Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a +y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.XbyRotationAboutOrigin(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.YbyRotationAboutOrigin(System.Double)">
            <summary>
            Y-coordinate on the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.XbyRotationAboutFocusRight(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.XbyRotationAboutFocusLeft(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the left (-X) focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the left (-X) focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.getVerticesMinor">
            <summary>
            Gets the minor vertices.
            </summary>
            <returns>Tuple&lt;CartesianCoordinate, CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.getVertexMajor2">
            <summary>
            Gets the vertex major2 coordinate.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ConicSectionEllipticCurve.distanceFromVertexMinorToMajorAxis(System.Double,System.Double)">
            <summary>
            Distance from local origin to minor Vertex, b.
            </summary>
            <param name="a">Distance from local origin to major vertex, a.</param>
            <param name="c">Distance from local origin to the focus, c.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Curve">
            <summary>
            Class Curve.
            Implements the <see cref="T:MPT.Math.Curves.ICurve" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.ICurve" />
        </member>
        <member name="F:MPT.Math.Curves.Curve.DEFAULT_TOLERANCE">
            <summary>
            The default tolerance
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Curve._tolerance">
            <summary>
            The tolerance.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Curve.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="F:MPT.Math.Curves.Curve._vectorParametric">
            <summary>
            The parametric vector that describes the curve.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Curve.vectorParametric">
            <summary>
            The parametric vector that describes the curve.
            </summary>
            <value>The vector parametric.</value>
        </member>
        <member name="F:MPT.Math.Curves.Curve._range">
            <summary>
            The range
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Curve._limitStartDefault">
            <summary>
            The default limit start coordinate.
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Curve._limitEndDefault">
            <summary>
            The default limit end coordinate.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Curve.Range">
            <summary>
            The range of max/min limits that apply to the curve.
            </summary>
            <value>The range.</value>
        </member>
        <member name="M:MPT.Math.Curves.Curve.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Curve"/> class.
            </summary>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Curves.Curve.XbyRotationAboutOrigin(System.Double)">
            <summary>
            X-coordinate on the right curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the local origin, in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Curve.YbyRotationAboutOrigin(System.Double)">
            <summary>
            Y-coordinate on the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the local origin, in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Curve.xByParameter(System.Double)">
            <summary>
            The x-component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Curve.yByParameter(System.Double)">
            <summary>
            The y-component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Curve.xPrimeByParameter(System.Double)">
            <summary>
            The x-component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Curve.yPrimeByParameter(System.Double)">
            <summary>
            The y-component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Curve.xPrimeDoubleByParameter(System.Double)">
            <summary>
            The x-component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Curve.yPrimeDoubleByParameter(System.Double)">
            <summary>
            The y-component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Curve.createParametricEquation">
            <summary>
            Creates the parametric vector.
            </summary>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Curve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:MPT.Math.Curves.EllipticalCurve">
            <summary>
            An ellipse is the set of all points for which the sum of the distances from two fixed points (the foci) is constant. In the case of an ellipse, there are two foci, and two directrices.
            Implements the <see cref="T:MPT.Math.Curves.ConicSectionEllipticCurve" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.ConicSectionEllipticCurve" />
        </member>
        <member name="P:MPT.Math.Curves.EllipticalCurve.DistanceFromFocusToLocalOrigin">
            <summary>
            Distance from local origin to the focus, c.
            </summary>
            <value>The distance from focus to origin.</value>
        </member>
        <member name="P:MPT.Math.Curves.EllipticalCurve.SemilatusRectumDistance">
            <summary>
            Distance from the focus to the curve along a line perpendicular to the major axis and the focus, p.
            </summary>
            <value>The p.</value>
        </member>
        <member name="P:MPT.Math.Curves.EllipticalCurve.Focus2">
            <summary>
            Gets the second focus, which lies to the right of the local origin.
            </summary>
            <value>The focus2.</value>
        </member>
        <member name="P:MPT.Math.Curves.EllipticalCurve.Directrix2">
            <summary>
            Gets the second directrix, Xe, which lies to the right of the local origin.
            </summary>
            <value>The directrix.</value>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.#ctor(MPT.Math.Coordinates.CartesianCoordinate,System.Double,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.EllipticalCurve" /> class.
            </summary>
            <param name="vertexMajor">The major vertex, M.</param>
            <param name="distanceFromFocusToLocalOrigin">The distance, c, from focus, f, to local origin.</param>
            <param name="localOrigin">The coordinate of the local origin.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.#ctor(System.Double,System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.EllipticalCurve" /> class.
            </summary>
            <param name="a">Distance, a, from local origin to major vertex, M.</param>
            <param name="b">Distance, b, from local origin to minor vertex, m.</param>
            <param name="center">The center.</param>
            <param name="rotation">The rotation offset from the horizontal x-axis.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.XatY(System.Double)">
            <summary>
            +X-coordinate on the curve that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.YatX(System.Double)">
            <summary>
            +Y-coordinate on the curve that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.LengthBetween(MPT.Math.Coordinates.AngularOffset)">
            <summary>
            The length within the provided rotation along an elliptical curve.
            </summary>
            <param name="rotation">Rotation to get arc length between.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.Length">
            <summary>
            Length of the curve between the limits.
            <a href="https://www.mathsisfun.com/geometry/ellipse-perimeter.html">Reference</a>.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.LengthBetween(System.Double,System.Double)">
            <summary>
            Length of the curve between two points.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative length along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.NormalVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative length along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.CoordinatePolar(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.XsAtY(System.Double)">
            <summary>
            X-coordinates on the curve that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which x-coordinates are desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.YsAtX(System.Double)">
            <summary>
            Y-coordinates on the curve that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which y-coordinates are desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.IsIntersectingCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if [is intersecting coordinate] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.RadiiAboutOrigin(System.Double)">
            <summary>
            The radii measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.LengthBetween(MPT.Math.Coordinates.AngularOffset,System.Double,System.Double)">
            <summary>
            The length within the provided rotation along an elliptical curve.
            </summary>
            <param name="rotation">Rotation to get arc length between.</param>
            <param name="majorAxisLength">The length from the origin to major vertex, a.</param>
            <param name="minorAxisLength">The length from the origin to minor vertex, b.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.distanceFromFocusToOrigin(System.Double,System.Double)">
            <summary>
            Distances from focus to origin.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.getLocalOrigin">
            <summary>
            The coordinate of the local origin.
            </summary>
            <value>The local origin.</value>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.EllipticalCurve.CloneCurve">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.HyperbolicCurve">
            <summary>
            A hyperbola is the set of all points where the difference between their distances from two fixed points (the foci) is constant. 
            In the case of a hyperbola, there are two foci and two directrices. Hyperbolas also have two asymptotes.
            Implements the <see cref="T:MPT.Math.Curves.ConicSectionCurve" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.ConicSectionCurve" />
        </member>
        <member name="P:MPT.Math.Curves.HyperbolicCurve.DistanceFromFocusToLocalOrigin">
            <summary>
            Distance from local origin to the focus, c.
            </summary>
            <value>The distance from focus to origin.</value>
        </member>
        <member name="P:MPT.Math.Curves.HyperbolicCurve.SemilatusRectumDistance">
            <summary>
            Distance from the focus to the curve along a line perpendicular to the major axis and the focus, p.
            </summary>
            <value>The p.</value>
        </member>
        <member name="P:MPT.Math.Curves.HyperbolicCurve.Asymptotes">
            <summary>
            Gets the asymptotes.
            </summary>
            <value>The asymptotes.</value>
        </member>
        <member name="P:MPT.Math.Curves.HyperbolicCurve.Focus2">
            <summary>
            Gets the second focus, which lies to the left of the local origin.
            </summary>
            <value>The focus2.</value>
        </member>
        <member name="P:MPT.Math.Curves.HyperbolicCurve.VerticesMinor2">
            <summary>
            Gets the second set of minor vertices, b which lie to the left of the local origin, along a line perpendicular to a line passing through the major vertex, a, and focus.
            </summary>
            <value>The conjugate vertices.</value>
        </member>
        <member name="P:MPT.Math.Curves.HyperbolicCurve.Directrix2">
            <summary>
            Gets the second directrix, Xe, which lies to the left of the local origin.
            </summary>
            <value>The directrix.</value>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.#ctor(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.HyperbolicCurve"/> class.
            </summary>
            <param name="a">Distance, a, from local origin to major vertex, M, which lies at the apex of the curve.</param>
            <param name="vertexMajor">The major vertex, M, which lies at the peak of the parabola.</param>
            <param name="focus">The focus, f.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.#ctor(System.Double,System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.EllipticalCurve" /> class.
            </summary>
            <param name="a">Distance, a, from local origin to major vertex, M, which lies at the apex of the curve.</param>
            <param name="b">Distance, b, from local origin to minor vertex, M, which defines the asymptote that passes through the center.</param>
            <param name="center">The center.</param>
            <param name="rotation">The rotation offset from the horizontal x-axis.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.createParametricEquation">
            <summary>
            Creates the parametric vector.
            </summary>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.XatY(System.Double)">
            <summary>
            +X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which a +x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.YatX(System.Double)">
            <summary>
            +Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a +y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.XbyRotationAboutOriginRight(System.Double)">
            <summary>
            X-coordinate on the right curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            <a href="https://www.ck12.org/book/ck-12-calculus-concepts/section/10.3/">Reference</a>.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.XbyRotationAboutOriginLeft(System.Double)">
            <summary>
            X-coordinate on the left curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            <a href="https://www.ck12.org/book/ck-12-calculus-concepts/section/10.3/">Reference</a>.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.XbyRotationAboutFocusRight(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.XbyRotationAboutFocusLeft(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the left (-X) focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the left (-X) focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.Length">
            <summary>
            Length of the curve.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.LengthBetween(System.Double,System.Double)">
            <summary>
            Length of the curve between two points.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.ChordLength">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.ChordLengthBetween(System.Double,System.Double)">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.Chord">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.ChordBetween(System.Double,System.Double)">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the linear curve is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the linear curve is ended.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.NormalVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.CoordinatePolar(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.XsAtY(System.Double)">
            <summary>
            X-coordinates on the curve that correspond to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which x-coordinates are desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.YsAtX(System.Double)">
            <summary>
            Y-coordinates on the curve that correspond to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.IsIntersectingCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if [is intersecting coordinate] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.getLocalOrigin">
            <summary>
            The coordinate of the local origin.
            </summary>
            <value>The local origin.</value>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.getVerticesMinor">
            <summary>
            Gets the minor vertices.
            </summary>
            <returns>Tuple&lt;CartesianCoordinate, CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.distanceFromVertexMinorToMajorAxis(System.Double,System.Double)">
            <summary>
            Distance, b, from minor vertex, m, to the major axis, which is a line that passes through the major vertex, M, and the focus, f.
            </summary>
            <param name="a">Distance, a, from local origin to major vertex, M.</param>
            <param name="c">Distance, c, from local origin to the focus, f.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.distanceFromFocusToOrigin(System.Double,System.Double)">
            <summary>
            Distance, c, from focus,f, to origin.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.HyperbolicCurve.CloneCurve">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.ICurve">
            <summary>
            Interface ICurve
            Implements the <see cref="T:MPT.Math.ITolerance" />
            </summary>
            <seealso cref="T:MPT.Math.ITolerance" />
        </member>
        <member name="T:MPT.Math.Curves.ICurveLimits">
            <summary>
            Interface for a curve that is comprised of a path with some form of bounding limits.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.ICurveLimits.Range">
            <summary>
            The range of max/min limits that apply to the curve.
            </summary>
            <value>The range.</value>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.Length">
            <summary>
            Length of the curve.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.LengthBetween(System.Double,System.Double)">
            <summary>
            Length of the curve between two points.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.ChordLength">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.ChordLengthBetween(System.Double,System.Double)">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.Chord">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.ChordBetween(System.Double,System.Double)">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the linear curve is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the linear curve is ended.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.NormalVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.CoordinateCartesian(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurveLimits.CoordinatePolar(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="T:MPT.Math.Curves.ICurvePositionCartesian">
            <summary>
            Curve position can be represented in cartesian coordinates.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.ICurvePositionCartesian.XatY(System.Double)">
            <summary>
            X-coordinate on the curve that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurvePositionCartesian.YatX(System.Double)">
            <summary>
            Y-coordinate on the curve that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurvePositionCartesian.XsAtY(System.Double)">
            <summary>
            X-coordinates on the curve that correspond to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which x-coordinates are desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurvePositionCartesian.YsAtX(System.Double)">
            <summary>
            Y-coordinates on the curve that correspond to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which y-coordinates are desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurvePositionCartesian.IsIntersectingCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if [is intersecting coordinate] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MPT.Math.Curves.ICurvePositionPolar">
            <summary>
            Curve position can be represented in polar coordinates.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.ICurvePositionPolar.RadiusAboutOrigin(System.Double)">
            <summary>
            The radius measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ICurvePositionPolar.RadiiAboutOrigin(System.Double)">
            <summary>
            The radii measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.Curves.IntersectingCurveException">
            <summary>
            Class IntersectingCurveException.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:MPT.Math.Curves.IntersectingCurveException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.IntersectingCurveException"/> class.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.IntersectingCurveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.IntersectingCurveException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MPT.Math.Curves.IntersectingCurveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.IntersectingCurveException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:MPT.Math.Curves.IPerpendicularProjections">
            <summary>
            Interface IPerpendicularProjections
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.IPerpendicularProjections.CoordinateOfPerpendicularProjection(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Coordinate of where a perpendicular projection from a curve tangent intersects the provided coordinate.
            </summary>
            <param name="point">The point.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="T:MPT.Math.Curves.LinearCurve">
            <summary>
            Class LinearCurve.
            Implements the <see cref="T:MPT.Math.Curves.ICurve" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.ICurve" />
        </member>
        <member name="P:MPT.Math.Curves.LinearCurve.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="F:MPT.Math.Curves.LinearCurve._controlPointI">
            <summary>
            The control point i
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.LinearCurve.ControlPointI">
            <summary>
            Gets the control point i.
            </summary>
            <value>The control point i.</value>
        </member>
        <member name="F:MPT.Math.Curves.LinearCurve._controlPointJ">
            <summary>
            The control point j
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.LinearCurve.ControlPointJ">
            <summary>
            Gets the control point j.
            </summary>
            <value>The control point j.</value>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes the linear curve to pass through the provided points.
            </summary>
            <param name="i">First point of the line.</param>
            <param name="j">Second point of the line.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.setTolerances(System.Double)">
            <summary>
            Sets the tolerances.
            </summary>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.createParametricEquation">
            <summary>
            Creates the parametric vector.
            </summary>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.CurveByYIntercept(System.Double,System.Double)">
            <summary>
            Returns a curve based on the slope and y-intercept.
            </summary>
            <param name="slope">The slope.</param>
            <param name="yIntercept">The y intercept.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.CurveByXIntercept(System.Double,System.Double)">
            <summary>
            Returns a curve based on the slope and x-intercept.
            </summary>
            <param name="slope">The slope.</param>
            <param name="xIntercept">The x intercept.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsHorizontal">
            <summary>
            Determines whether this instance is horizontal.
            </summary>
            <returns><c>true</c> if this instance is horizontal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsVertical">
            <summary>
            Determines whether this instance is vertical.
            </summary>
            <returns><c>true</c> if this instance is vertical; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsParallel(MPT.Math.Curves.LinearCurve)">
            <summary>
            Lines are parallel to each other.
            </summary>
            <param name="otherLine">The other line.</param>
            <returns><c>true</c> if the specified other line is parallel; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsPerpendicular(MPT.Math.Curves.LinearCurve)">
            <summary>
            Lines are perpendicular to each other.
            </summary>
            <param name="otherLine">The other line.</param>
            <returns><c>true</c> if the specified other line is perpendicular; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsIntersectingCurve(MPT.Math.Curves.LinearCurve)">
            <summary>
            Provided line segment intersects an infinitely long line projecting off of the line segment.
            It isn't necessarily intersecting between the defining points.
            </summary>
            <param name="otherLine">The other line.</param>
            <returns><c>true</c> if [is intersecting curve] [the specified other line]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Slope">
            <summary>
            Slope of the line.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Curvature">
            <summary>
            Curvature of the line.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.InterceptX">
            <summary>
            X-Intercept of the line.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.InterceptY">
            <summary>
            Y-Intercept of the line.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.TangentVector">
            <summary>
            Vector that is tangential to the line connecting the defining points.
            </summary>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.NormalVector">
            <summary>
            Vector that is normal to the line connecting the defining points.
            </summary>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.RadiusAboutOrigin(System.Double)">
            <summary>
            The radius measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.RadiiAboutOrigin(System.Double)">
            <summary>
            The radii measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.XatY(System.Double)">
            <summary>
            X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.YatX(System.Double)">
            <summary>
            Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.XsAtY(System.Double)">
            <summary>
            X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.YsAtX(System.Double)">
            <summary>
            Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsIntersectingCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if [is intersecting coordinate] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Length">
            <summary>
            Length of the line segment.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.LengthBetween(System.Double,System.Double)">
            <summary>
            Length of the curve between two points.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.ChordLength">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.ChordLengthBetween(System.Double,System.Double)">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Chord">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.ChordBetween(System.Double,System.Double)">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the linear curve is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the linear curve is ended.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.NormalVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.CoordinateCartesian(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.CoordinatePolar(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IntersectionCoordinate(MPT.Math.Curves.LinearCurve)">
            <summary>
            Returns a point where the line segment intersects the provided line segment.
            </summary>
            <param name="otherLine">Line segment that intersects the current line segment.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.CoordinateOfPerpendicularProjection(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Coordinate of where a perpendicular projection intersects the provided coordinate.
            </summary>
            <param name="point">The point.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Length(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            The length between the provided points along a linear curve.
            </summary>
            <param name="pointI">Point i.</param>
            <param name="pointJ">Point j.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsHorizontal(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Determines if the line is horizontal.
            </summary>
            <param name="ptI">The point i.</param>
            <param name="ptJ">The point j.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the shape segment is horizontal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsHorizontal(System.Double)">
            <summary>
            Determines whether the specified slope is vertical.
            </summary>
            <param name="slope">The slope.</param>
            <returns><c>true</c> if the specified slope is vertical; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsVertical(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Determines if the segment is vertical.
            </summary>
            <param name="ptI">The point i.</param>
            <param name="ptJ">The point j.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the segment is vertical, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsVertical(System.Double)">
            <summary>
            Determines whether the specified slope is vertical.
            </summary>
            <param name="slope">The slope.</param>
            <returns><c>true</c> if the specified slope is vertical; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsParallel(System.Double,System.Double,System.Double)">
            <summary>
            True: Slopes are parallel.
            </summary>
            <param name="slope1">The slope1.</param>
            <param name="slope2">The slope2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the specified slope1 is parallel; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.IsPerpendicular(System.Double,System.Double,System.Double)">
            <summary>
            True: Slopes are perpendicular.
            </summary>
            <param name="slope1">The slope1.</param>
            <param name="slope2">The slope2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the specified slope1 is perpendicular; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Slope(System.Double,System.Double,System.Double)">
            <summary>
            Returns the slope of a line (y2-y1)/(x2-x1).
            </summary>
            <param name="rise">Difference in y-coordinate values or equivalent.</param>
            <param name="run">Difference in x-coordinate values or equivalent.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentException">Rise &amp; run are both zero. Cannot determine a slope for a point.</exception>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Slope(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the slope of a line (y2-y1)/(x2-x1).
            </summary>
            <param name="x1">First x-coordinate.</param>
            <param name="y1">First y-coordinate.</param>
            <param name="x2">Second x-coordinate.</param>
            <param name="y2">Second y-coordinate.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Slope(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Returns the slope of a line (y2-y1)/(x2-x1).
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Slope(MPT.Math.Coordinates.CartesianOffset,System.Double)">
            <summary>
            Returns the slope of a line (y2-y1)/(x2-x1).
            </summary>
            <param name="delta">The difference between two points.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.InterceptX(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the x-intercept.
            Returns +infinity if line is horizontal.
            </summary>
            <param name="x1">First x-coordinate.</param>
            <param name="y1">First y-coordinate.</param>
            <param name="x2">Second x-coordinate.</param>
            <param name="y2">Second y-coordinate.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.InterceptX(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Returns the x-intercept.
            </summary>
            <param name="point1">First point defining a line.</param>
            <param name="point2">Second point defining a line.</param>
            <param name="tolerance">&gt;Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.InterceptY(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the y-intercept.
            Returns +infinity if line is vertical.
            </summary>
            <param name="x1">First x-coordinate.</param>
            <param name="y1">First y-coordinate.</param>
            <param name="x2">Second x-coordinate.</param>
            <param name="y2">Second y-coordinate.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.InterceptY(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Returns the y-intercept.
            </summary>
            <param name="point1">First point defining a line.</param>
            <param name="point2">Second point defining a line.</param>
            <param name="tolerance">&gt;Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.AreLinesIntersecting(System.Double,System.Double,System.Double)">
            <summary>
            The lines intersect.
            </summary>
            <param name="slope1">Slope of the first line.</param>
            <param name="slope2">Slope of the second line.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.LineIntersectX(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The x-coordinate of the intersection of two lines.
            </summary>
            <param name="slope1">Slope of the first line.</param>
            <param name="xIntercept1">X-intercept of the first line.</param>
            <param name="slope2">Slope of the second line.</param>
            <param name="xIntercept2">X-intercept of the second line.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.LineIntersectY(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The y-coordinate of the intersection of two lines.
            </summary>
            <param name="slope1">Slope of the first line.</param>
            <param name="yIntercept1">Y-intercept of the first line.</param>
            <param name="slope2">Slope of the second line.</param>
            <param name="yIntercept2">Y-intercept of the second line.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.LineIntersect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The coordinates of the intersection of two lines.
            </summary>
            <param name="slope1">Slope of the first line.</param>
            <param name="xIntercept1">X-intercept of the first line.</param>
            <param name="yIntercept1">Y-intercept of the first line.</param>
            <param name="slope2">Slope of the second line.</param>
            <param name="xIntercept2">X-intercept of the second line.</param>
            <param name="yIntercept2">Y-intercept of the second line.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.CoordinateOfPerpendicularProjection(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Curves.LinearCurve)">
            <summary>
            Coordinate of where a perpendicular projection intersects the provided coordinate.
            </summary>
            <param name="point">The point.</param>
            <param name="referenceLine">The line to which a perpendicular projection is drawn.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LinearCurve.CloneCurve">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.LogarithmicSpiralCurve">
            <summary>
            A curve whose polar tangential angle is constant.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.LogarithmicSpiralCurve.RadiusAtOrigin">
            <summary>
            Gets the radius at origin, a.
            </summary>
            <value>The radius at origin.</value>
        </member>
        <member name="P:MPT.Math.Curves.LogarithmicSpiralCurve.RadiusChangeWithRotation">
            <summary>
            Gets the radius change with differential rotation, b.
            </summary>
            <value>The radius change with differential rotation.</value>
        </member>
        <member name="P:MPT.Math.Curves.LogarithmicSpiralCurve.RadiusPrime">
            <summary>
            Gets the differential radius change with differential rotation, dr/dθ.
            </summary>
            <value>The differential radius change with differential rotation, dr/dθ.</value>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.LogarithmicSpiralCurve"/> class.
            </summary>
            <param name="radiusAtOrigin">The radius at origin.</param>
            <param name="radiusChangeWithRotation">The radius change with rotation.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.createParametricEquation">
            <summary>
            Creates the parametric vector.
            </summary>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.RadiusAboutOrigin(System.Double)">
            <summary>
            The radius measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.RadiusAboutOffset(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            The radius measured from the local coordinate origin as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <param name="offset">The offst of the shape center/origin from the coordinate origin.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.SlopeByAngle(System.Double)">
            <summary>
            Slope of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.CurvatureByAngle(System.Double)">
            <summary>
            Curvature of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.TangentialAngleByAngle(System.Double)">
            <summary>
            Tangential angle of the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.PolarTangentialAngleAboutOriginByAngle(System.Double)">
            <summary>
            Angle between the tangent of the curve and the radius connecting the origin to the point considered.
            This is in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.TangentVectorByAngle(System.Double)">
            <summary>
            Vector that is tangential to the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.NormalVectorByAngle(System.Double)">
            <summary>
            Vector that is tangential to the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.Length">
            <summary>
            Length of the curve between the limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.LengthBetween(System.Double,System.Double)">
            <summary>
            Length of the curve between two points.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.ChordLength">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.ChordLengthBetween(System.Double,System.Double)">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.Chord">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.ChordBetween(System.Double,System.Double)">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the linear curve is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the linear curve is ended.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative length along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.NormalVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative length along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.CoordinateCartesian(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.CoordinatePolar(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.CoordinateByAngle(MPT.Math.Coordinates.Angle)">
            <summary>
            The cartesian coordinate on the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angle">Angle of rotation about the local origin</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.CoordinateByAngle(System.Double)">
            <summary>
            The cartesian coordinate on the curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the local origin, in radians.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.LengthTo(System.Double)">
            <summary>
            Length of the curve from the start to the specified position.
            </summary>
            <param name="angleRadians">Angle of rotation about the local origin, in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.LengthBetween(MPT.Math.Coordinates.AngularOffset)">
            <summary>
            The length within the provided rotation along a circular curve.
            </summary>
            <param name="rotation">Rotation to get arc length between.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.LogarithmicSpiralCurve.CloneCurve">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.OverlappingCurvesException">
            <summary>
            Class OverlappingCurvesException.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:MPT.Math.Curves.OverlappingCurvesException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.OverlappingCurvesException"/> class.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.OverlappingCurvesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.OverlappingCurvesException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MPT.Math.Curves.OverlappingCurvesException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.OverlappingCurvesException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:MPT.Math.Curves.ParabolicCurve">
            <summary>
            A parabola is the set of all points whose distance from a fixed point, called the focus, is equal to the distance from a fixed line, called the directrix.
            Implements the <see cref="T:MPT.Math.Curves.ConicSectionCurve" />
            <a href="https://en.wikipedia.org/wiki/Parabola">Wikipedia</a>.
            </summary>
            <seealso cref="T:MPT.Math.Curves.ConicSectionCurve" />
        </member>
        <member name="P:MPT.Math.Curves.ParabolicCurve.DistanceFromFocusToLocalOrigin">
            <summary>
            Distance from local origin to the focus, c.
            </summary>
            <value>The distance from focus to origin.</value>
        </member>
        <member name="P:MPT.Math.Curves.ParabolicCurve.DistanceFromDirectrixToLocalOrigin">
            <summary>
            Distance from local origin to the directrix line, Xe.
            </summary>
            <value>The distance from directrix to origin.</value>
        </member>
        <member name="P:MPT.Math.Curves.ParabolicCurve.DistanceFromFocusToDirectrix">
            <summary>
            Distance from the focus to the directrix, p.
            </summary>
            <value>The distance from focus to directrix.</value>
        </member>
        <member name="P:MPT.Math.Curves.ParabolicCurve.Eccentricity">
            <summary>
            The eccentricity, e.
            A measure of how much the conic section deviates from being circular.
            Distance from any point on the conic section to its focus, divided by the perpendicular distance from that point to the nearest directrix.
            </summary>
            <value>The eccentricity.</value>
        </member>
        <member name="P:MPT.Math.Curves.ParabolicCurve.SemilatusRectumDistance">
            <summary>
            Distance from the focus to the curve along a line perpendicular to the major axis and the focus, p.
            </summary>
            <value>The p.</value>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.ParabolicCurve"/> class.
            </summary>
            <param name="vertexMajor">The major vertex, M, which lies at the peak of the parabola.</param>
            <param name="focus">The focus, f.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.#ctor(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.ParabolicCurve" /> class.
            </summary>
            <param name="a">Distance, a, from major vertex, M, to the focus, f.</param>
            <param name="center">The center.</param>
            <param name="rotation">The rotation offset from the horizontal x-axis.</param>
            <param name="tolerance">Tolerance to apply to the curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.createParametricEquation">
            <summary>
            Creates the parametric vector.
            </summary>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.XatY(System.Double)">
            <summary>
            X-coordinate on the line segment that corresponds to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which an x-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.YatX(System.Double)">
            <summary>
            +Y-coordinate on the line segment that corresponds to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a +y-coordinate is desired.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.XbyRotationAboutFocusRight(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.XbyRotationAboutFocusLeft(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the left (-X) focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the left (-X) focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.Length">
            <summary>
            Length of the curve.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.LengthBetween(System.Double,System.Double)">
            <summary>
            Length of the curve between two points.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.ChordLength">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.ChordLengthBetween(System.Double,System.Double)">
            <summary>
            The length of the chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the length measurement is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the length measurement is ended.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.Chord">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.ChordBetween(System.Double,System.Double)">
            <summary>
            The chord connecting the start and end limits.
            </summary>
            <param name="relativePositionStart">Relative position along the path at which the linear curve is started.</param>
            <param name="relativePositionEnd">Relative position along the path at which the linear curve is ended.</param>
            <returns>LinearCurve.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.TangentVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.NormalVector(System.Double)">
            <summary>
            Vector that is tangential to the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the tangent vector is desired.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.CoordinatePolar(System.Double)">
            <summary>
            Coordinate of the curve at the specified position.
            If the shape is a closed shape, <paramref name="relativePosition" /> = {any integer} where <paramref name="relativePosition" /> = 0.
            </summary>
            <param name="relativePosition">Relative position along the path at which the coordinate is desired.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.XsAtY(System.Double)">
            <summary>
            X-coordinates on the curve that correspond to the y-coordinate given.
            </summary>
            <param name="y">Y-coordinate for which x-coordinates are desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.YsAtX(System.Double)">
            <summary>
            Y-coordinates on the curve that correspond to the x-coordinate given.
            </summary>
            <param name="x">X-coordinate for which a y-coordinate is desired.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.IsIntersectingCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Provided point lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns><c>true</c> if [is intersecting coordinate] [the specified coordinate]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.getLocalOrigin">
            <summary>
            The coordinate of the local origin.
            </summary>
            <value>The local origin.</value>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.getVerticesMinor">
            <summary>
            Gets the minor vertices.
            </summary>
            <returns>Tuple&lt;CartesianCoordinate, CartesianCoordinate&gt;.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.distanceFromVertexMinorToMajorAxis(System.Double,System.Double)">
            <summary>
            Distance from local origin to minor Vertex, b.
            </summary>
            <param name="a">Distance from local origin to major vertex, a.</param>
            <param name="c">Distance from local origin to the focus, c.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.ParabolicCurve.CloneCurve">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametric1">
            <summary>
            Class BezierParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametric1.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametric1" /> class, which represents an n = 1 parametric.
            </summary>
            <param name="parent">The parent object whose properties are used in the associated parametric equations.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametric2">
            <summary>
            Class BezierParametric2.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametric2.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametric2" /> class, which represents an n = 1 parametric.
            </summary>
            <param name="parent">The parent object whose properties are used in the associated parametric equations.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametric3">
            <summary>
            Class BezierParametric3.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametric3.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametric3" /> class, which represents an n = 1 parametric.
            </summary>
            <param name="parent">The parent object whose properties are used in the associated parametric equations.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase">
            <summary>
            Class BezierParametricBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase._parent">
            <summary>
            Gets the parent object whose properties are used in the associated parametric equations.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase">
            <summary>
            Class BezierParametricLinearBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase._parent">
            <summary>
            Gets the parent object whose properties are used in the associated parametric equations.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP1">
            <summary>
            Class BezierParametricX1.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP1.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP1" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP1.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP1.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP1.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP1.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP2">
            <summary>
            Class BezierParametricX2.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP2.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP2" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP2.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP2.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP2.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP2.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP2.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP3">
            <summary>
            Class BezierParametricX3.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP3.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP3" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP3.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP3.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP3.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP3.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricP3.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1">
            <summary>
            Class BezierParametricX1.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX2">
            <summary>
            Class BezierParametricX2.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX2.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX2" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX2.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX2.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX2.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX2.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX2.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX3">
            <summary>
            Class BezierParametricX3.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX3.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX3.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX3.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX3.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX3.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX3.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY1">
            <summary>
            Class BezierParametricY1.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY1.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY1.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY1.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY1.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY1.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY2">
            <summary>
            Class BezierParametricY2.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY2.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX2" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY2.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY2.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY2.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY2.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY2.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY3">
            <summary>
            Class BezierParametricY3.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricLinearBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY3.#ctor(MPT.Math.Curves.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Beziers.BezierParametricX1" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY3.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY3.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY3.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY3.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Beziers.BezierParametricY3.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.CartesianParametricEquation">
            <summary>
            Class CartesianParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.IParametricCartesian`1" />
            Implements the <see cref="T:System.ICloneable" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.IParametricCartesian`1" />
            <seealso cref="T:System.ICloneable" />
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.CartesianParametricEquation._differentiationIndex">
            <summary>
            The differentiation index
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.CartesianParametricEquation._component">
            <summary>
            The x
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.CartesianParametricEquation.Component">
            <summary>
            The x-component, at position s.
            </summary>
            <value>The xcomponent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.CartesianParametricEquation" /> class.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.Differentiate">
            <summary>
            Returns the differential of the current parametric function.
            </summary>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.DifferentiateBy(System.Int32)">
            <summary>
            Returns the current parametric function, differentiated to the specified # of times.
            </summary>
            <param name="index">The index to differentiate to, which must be greater than 0.</param>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.DifferentialFirst">
            <summary>
            Returns the first differential of the parametric function.
            </summary>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.DifferentialSecond">
            <summary>
            Returns the second differential of the parametric function.
            </summary>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.HasDifferential">
            <summary>
            Determines whether this instance can be differentiated further.
            </summary>
            <returns><c>true</c> if this instance has differential; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.op_Multiply(MPT.Math.Curves.Parametrics.CartesianParametricEquation,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.op_Division(MPT.Math.Curves.Parametrics.CartesianParametricEquation,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CartesianParametricEquation.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponent">
            <summary>
            Class PolarParametricComponent.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ParametricEquation`1" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ParametricEquation`1" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponent" /> class that only returns an angle of 0.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponent.#ctor(MPT.Math.Curves.Parametrics.ValueAtPosition{MPT.Math.Coordinates.Angle},MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponent" /> class that returns a parametric function, and possibly a differential of the function.
            </summary>
            <param name="function">The function.</param>
            <param name="functionDifferential">The differential of the function.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase">
            <summary>
            Class AngularParametricBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponents`1" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponents`1" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase.#ctor(MPT.Math.Curves.Curve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase.initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase.op_Multiply(MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase.op_Division(MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponents`1">
            <summary>
            Class AngularParametricComponents.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.CurveParametricComponents`3" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:MPT.Math.Curves.Parametrics.CurveParametricComponents`3" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponents`1.#ctor(MPT.Math.Curves.Curve)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponents`1.baseByParameterScaled(System.Double)">
            <summary>
            The scaled component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponents`1.primeByParameterScaled(System.Double)">
            <summary>
            The scaled component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponents`1.primeDoubleByParameterScaled(System.Double)">
            <summary>
            The scaled component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponent">
            <summary>
            Class CartesianParametricComponent.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ParametricEquation`1" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ParametricEquation`1" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponent" /> class that only returns 0.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponent.#ctor(MPT.Math.Curves.Parametrics.ValueAtPosition{MPT.Math.Coordinates.CartesianCoordinate},MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponent" /> class that returns a parametric function, and possibly a differential of the function.
            </summary>
            <param name="function">The function.</param>
            <param name="functionDifferential">The differential of the function.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponentBase">
            <summary>
            Class CartesianParametricBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponents`1" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponents`1" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponentBase.#ctor(MPT.Math.Curves.Curve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponentBase" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponentBase.initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponentBase.op_Multiply(MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponentBase,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponentBase.op_Division(MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponentBase,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponents`1">
            <summary>
            Class CartesianParametricComponents.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.CurveParametricComponents`3" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:MPT.Math.Curves.Parametrics.CurveParametricComponents`3" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponents`1.#ctor(MPT.Math.Curves.Curve)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponents`1.baseByParameterScaled(System.Double)">
            <summary>
            The scaled component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponents`1.primeByParameterScaled(System.Double)">
            <summary>
            The scaled component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsCartesian.CartesianParametricComponents`1.primeDoubleByParameterScaled(System.Double)">
            <summary>
            The scaled component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponent">
            <summary>
            Class LinearParametricComponent.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ParametricEquation`1" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ParametricEquation`1" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponent.#ctor(MPT.Math.Curves.Parametrics.ValueAtPosition{System.Double},MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponent" /> class that returns a parametric function, and possibly a differential of the function.
            </summary>
            <param name="function">The function.</param>
            <param name="functionDifferential">The differential of the function.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase">
            <summary>
            Class LinearParametricBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponents`1" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponents`1" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase.#ctor(MPT.Math.Curves.Curve)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase.initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase.op_Multiply(MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase.op_Division(MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponents`1">
            <summary>
            Class LinearParametricComponents.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.CurveParametricComponents`3" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:MPT.Math.Curves.Parametrics.CurveParametricComponents`3" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponents`1.#ctor(MPT.Math.Curves.Curve)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponents`1.baseByParameterScaled(System.Double)">
            <summary>
            The scaled component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponents`1.primeByParameterScaled(System.Double)">
            <summary>
            The scaled component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponents`1.primeDoubleByParameterScaled(System.Double)">
            <summary>
            The scaled component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicAngularParametricBase">
            <summary>
            Class ConicRadialParametricBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsAngular.AngularParametricComponentBase" />
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicAngularParametricBase._parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicAngularParametricBase.#ctor(MPT.Math.Curves.ConicSectionCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicAngularParametricBase"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase">
            <summary>
            Class ConicParametricBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase._parent">
            <summary>
            Gets the parent object whose properties are used in the associated parametric equations.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase.#ctor(MPT.Math.Curves.ConicSectionCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametric">
            <summary>
            Class EllipticParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametric.#ctor(MPT.Math.Curves.ConicSectionEllipticCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametric" /> class.
            </summary>
            <param name="parent">The parent object whose properties are used in the associated parametric equations.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricX">
            <summary>
            Class EllipticParametricX.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricX.#ctor(MPT.Math.Curves.ConicSectionEllipticCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricX" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricX.BaseByParameter(System.Double)">
            <summary>
            Bases the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricX.PrimeByParameter(System.Double)">
            <summary>
            Primes the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricX.PrimeDoubleByParameter(System.Double)">
            <summary>
            Primes the double by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricX.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricX.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricY">
            <summary>
            Class EllipticParametricY.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricY.#ctor(MPT.Math.Curves.ConicSectionEllipticCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricY"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricY.BaseByParameter(System.Double)">
            <summary>
            Bases the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricY.PrimeByParameter(System.Double)">
            <summary>
            Primes the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricY.PrimeDoubleByParameter(System.Double)">
            <summary>
            Primes the double by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricY.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Elliptics.EllipticParametricY.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametric">
            <summary>
            Class HyperbolicParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametric.#ctor(MPT.Math.Curves.HyperbolicCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametric" /> class.
            </summary>
            <param name="parent">The parent object whose properties are used in the associated parametric equations.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricX">
            <summary>
            Class HyperbolicParametricX.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
            <a href="https://www.ck12.org/book/ck-12-calculus-concepts/section/10.3/">Reference</a>.
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricX.#ctor(MPT.Math.Curves.HyperbolicCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricX"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricX.BaseByParameter(System.Double)">
            <summary>
            X-coordinate on the right curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            <a href="https://www.ck12.org/book/ck-12-calculus-concepts/section/10.3/">Reference</a>.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricX.PrimeByParameter(System.Double)">
            <summary>
            X-component of the curve slope in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricX.PrimeDoubleByParameter(System.Double)">
            <summary>
            X-component of the curve curvature in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricX.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricX.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricY.BaseByParameter(System.Double)">
            <summary>
            Y-coordinate on the right curve in local coordinates about the local origin that corresponds to the parametric coordinate given.
            <a href="https://www.ck12.org/book/ck-12-calculus-concepts/section/10.3/">Reference</a>.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricY.PrimeByParameter(System.Double)">
            <summary>
            Y-component of the curve slope in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricY.PrimeDoubleByParameter(System.Double)">
            <summary>
            Y-component of the curve curvature in local coordinates about the local origin that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Parametric coordinate in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricY.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Hyperbolics.HyperbolicParametricY.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametric">
            <summary>
            Class ParabolicFocusParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametric.#ctor(MPT.Math.Curves.ParabolicCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametric" /> class.
            </summary>
            <param name="parent">The parent object whose properties are used in the associated parametric equations.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricX.BaseByParameter(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates about the focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the focus, in radians.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricX.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricX.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricY">
            <summary>
            Class ParabolicFocusParametricY.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricY.#ctor(MPT.Math.Curves.ParabolicCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricY"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricY.BaseByParameter(System.Double)">
            <summary>
            Y-coordinate on the curve in local coordinates about the focus that corresponds to the parametric coordinate given.
            </summary>
            <param name="angleRadians">Angle of rotation about the focus, in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricY.PrimeByParameter(System.Double)">
            <summary>
            Primes the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricY.PrimeDoubleByParameter(System.Double)">
            <summary>
            Primes the double by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricY.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicFocusParametricY.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametric">
            <summary>
            Class ParabolicParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametric.#ctor(MPT.Math.Curves.ParabolicCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametric" /> class.
            </summary>
            <param name="parent">The parent object whose properties are used in the associated parametric equations.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricX">
            <summary>
            Class ParabolicParametricX.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricX.#ctor(MPT.Math.Curves.ParabolicCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricX"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricX.BaseByParameter(System.Double)">
            <summary>
            X-coordinate on the curve in local coordinates that corresponds to the parametric coordinate given.
            <a href="http://amsi.org.au/ESA_Senior_Years/SeniorTopic2/2a/2a_2content_11.html">Reference</a>.
            </summary>
            <param name="t">Parametric coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricX.PrimeByParameter(System.Double)">
            <summary>
            Primes the by angle.
            </summary>
            <param name="t">The t.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricX.PrimeDoubleByParameter(System.Double)">
            <summary>
            Primes the double by angle.
            </summary>
            <param name="t">The t.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricX.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricX.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricY">
            <summary>
            Class ParabolicParametricY.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricY.#ctor(MPT.Math.Curves.ParabolicCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricY"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricY.BaseByParameter(System.Double)">
            <summary>
            Y-coordinate on the curve in local coordinates that corresponds to the parametric coordinate given.
            <a href="http://amsi.org.au/ESA_Senior_Years/SeniorTopic2/2a/2a_2content_11.html">Reference</a>.
            </summary>
            <param name="t">Parametric coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricY.PrimeByParameter(System.Double)">
            <summary>
            Primes the by angle.
            </summary>
            <param name="t">The t.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricY.PrimeDoubleByParameter(System.Double)">
            <summary>
            Primes the double by angle.
            </summary>
            <param name="t">The t.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricY.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.Parabolics.ParabolicParametricY.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametric">
            <summary>
            Class RadiusFocusParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.PolarParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.PolarParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametric.#ctor(MPT.Math.Curves.ConicSectionCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametric"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricLength">
            <summary>
            Class RadiusFocusParametricLength.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
            <a href="https://web.ma.utexas.edu/users/m408s/m408d/CurrentWeb/LM10-6-3.php">Reference</a>
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicLinearParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricLength.#ctor(MPT.Math.Curves.ConicSectionCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricLength"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricLength.BaseByParameter(System.Double)">
            <summary>
            The radius measured from the focus as a function of the angle in local coordinates.
            <a href="https://web.ma.utexas.edu/users/m408s/m408d/CurrentWeb/LM10-6-3.php">Reference</a>
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricLength.PrimeByParameter(System.Double)">
            <summary>
            The differential change in radius corresponding with a differential change in the angle, measured from the focus as a function of the angle in local coordinates.
            </summary>
            <param name="angleRadians">The angle in radians in local coordinates.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricLength.PrimeDoubleByParameter(System.Double)">
            <summary>
            Primes the double by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>Angle.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricLength.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricLength.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricRotation">
            <summary>
            Class RadiusFocusParametricRotation.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicAngularParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.ConicAngularParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricRotation.#ctor(MPT.Math.Curves.ConicSectionCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricRotation"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricRotation.BaseByParameter(System.Double)">
            <summary>
            Bases the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricRotation.PrimeByParameter(System.Double)">
            <summary>
            Primes the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricRotation.PrimeDoubleByParameter(System.Double)">
            <summary>
            Primes the double by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>Angle.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricRotation.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ConicSectionCurves.RadiusFocusParametricRotation.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.CurveParametricComponents`3">
            <summary>
            Class CurveParametricComponents.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <typeparam name="T3">The type of the t3.</typeparam>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.CurveParametricComponents`3._parentCurve">
            <summary>
            Gets the parent object whose properties are used in the associated parametric equations.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.CurveParametricComponents`3._base">
            <summary>
            The function base.
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.CurveParametricComponents`3._prime">
            <summary>
            The first derivative of the function.
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.CurveParametricComponents`3._doublePrime">
            <summary>
            The second derivative of the function.
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.CurveParametricComponents`3._components">
            <summary>
            The components
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.Item(System.Int32)">
            <summary>
            Gets the parametric component at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>T2.</returns>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.CurveParametricComponents`3._differentiationIndex">
            <summary>
            The differentiation index
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.CurveParametricComponents`3._scale">
            <summary>
            The scale
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.#ctor(`2)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.Differentiate(System.Int32)">
            <summary>
            Returns the differential of the current parametric function.
            </summary>
            <param name="index">The index to differentiate to, which must be greater than 0.</param>
            <returns>HyperbolicParametric.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index must not be greater than {_components.Count - 1} in order to differentiate.</exception>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.DifferentiateBy(System.Int32)">
            <summary>
            Returns the current parametric function, differentiated to the specified # of times.
            </summary>
            <param name="index">The index to differentiate to, which must be greater than 0.</param>
            <returns>HyperbolicParametric.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index: {index} must not be less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index: {index} must not be greater than {_components.Count - 1} in order to differentiate.</exception>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.HasDifferential">
            <summary>
            Determines whether this instance can be differentiated further.
            </summary>
            <returns><c>true</c> if this instance has differential; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.baseByParameterScaled(System.Double)">
            <summary>
            The scaled component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.BaseByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.primeByParameterScaled(System.Double)">
            <summary>
            The scaled component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.primeDoubleByParameterScaled(System.Double)">
            <summary>
            The scaled component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>T1.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.CurveParametricComponents`3.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.IParametricCartesian`1">
            <summary>
            Interface IParametricCartesian
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.IParametricCartesian`1.Component">
            <summary>
            The component, at position s.
            </summary>
            <value>The xcomponent.</value>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.IParametricEquation`1">
            <summary>
            Represents a parametric equation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.IParametricEquation`1.ValueAt(System.Double)">
            <summary>
            The value, at position s.
            </summary>
            <param name="s">The parametric position, s.</param>
            <returns>T.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.IParametricLinear`1">
            <summary>
            Represents a parametric equation in 2D cartesian coordinates.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.IParametricLinear`1.Xcomponent">
            <summary>
            The x-component, at position s.
            </summary>
            <value>The xcomponent.</value>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.IParametricLinear`1.Ycomponent">
            <summary>
            The y-component, at position s.
            </summary>
            <value>The ycomponent.</value>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.IParametricPolar`2">
            <summary>
            Represents a parametric equation in polar coordinates.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.IParametricPolar`2.Radius">
            <summary>
            The radial length, r, at position s.
            </summary>
            <value>The radial length.</value>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.IParametricPolar`2.Azimuth">
            <summary>
            The azimuth angle, φ, at position s.
            </summary>
            <value>The azimuth.</value>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.LinearParametricEquation">
            <summary>
            Class CurveParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.IParametricLinear`1" />
            Implements the <see cref="T:System.ICloneable" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.IParametricLinear`1" />
            <seealso cref="T:System.ICloneable" />
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.LinearParametricEquation._differentiationIndex">
            <summary>
            The differentiation index
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.LinearParametricEquation._x">
            <summary>
            The x
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.LinearParametricEquation.Xcomponent">
            <summary>
            The x-component, at position s.
            </summary>
            <value>The xcomponent.</value>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.LinearParametricEquation._y">
            <summary>
            The y
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.LinearParametricEquation.Ycomponent">
            <summary>
            The y-component, at position s.
            </summary>
            <value>The ycomponent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" /> class.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.Differentiate">
            <summary>
            Returns the differential of the current parametric function.
            </summary>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.DifferentiateBy(System.Int32)">
            <summary>
            Returns the current parametric function, differentiated to the specified # of times.
            </summary>
            <param name="index">The index to differentiate to, which must be greater than 0.</param>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.DifferentialFirst">
            <summary>
            Returns the first differential of the parametric function.
            </summary>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.DifferentialSecond">
            <summary>
            Returns the second differential of the parametric function.
            </summary>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.HasDifferential">
            <summary>
            Determines whether this instance can be differentiated further.
            </summary>
            <returns><c>true</c> if this instance has differential; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.op_Multiply(MPT.Math.Curves.Parametrics.LinearParametricEquation,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.op_Division(MPT.Math.Curves.Parametrics.LinearParametricEquation,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LinearParametricEquation.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Linear.LinearParametric">
            <summary>
            Class LinearParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametric.#ctor(MPT.Math.Curves.LinearCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametric" /> class.
            </summary>
            <param name="parent">The parent object whose properties are used in the associated parametric equations.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricBase">
            <summary>
            Class LinearParametricBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.Linear.LinearParametricBase._parent">
            <summary>
            Gets the parent object whose properties are used in the associated parametric equations.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricBase.#ctor(MPT.Math.Curves.LinearCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricBase" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricLinearBase">
            <summary>
            Class LinearParametricLinearBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.Linear.LinearParametricLinearBase._parent">
            <summary>
            Gets the parent object whose properties are used in the associated parametric equations.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricLinearBase.#ctor(MPT.Math.Curves.LinearCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricBase" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricP">
            <summary>
            Class LinearParametricP.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricBase" />
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.Linear.LinearParametricP._offset">
            <summary>
            The offset between points defining the linear curve.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricP.#ctor(MPT.Math.Curves.LinearCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricP" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricP.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricP.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricP.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricP.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricX">
            <summary>
            Class LinearParametricX.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricLinearBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricLinearBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricX.#ctor(MPT.Math.Curves.LinearCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricX" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricX.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricX.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricX.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricX.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricX.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricY">
            <summary>
            Class LinearParametricY.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricLinearBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricLinearBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricY.#ctor(MPT.Math.Curves.LinearCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.Linear.LinearParametricY" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricY.BaseByParameter(System.Double)">
            <summary>
            The component as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricY.PrimeByParameter(System.Double)">
            <summary>
            The component first differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricY.PrimeDoubleByParameter(System.Double)">
            <summary>
            The component second differentical as a function of the supplied parameter.
            </summary>
            <param name="parameter">The parameter, such as relative position between 0 &amp; 1, or the angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricY.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.Linear.LinearParametricY.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametric">
            <summary>
            Class LogarithmicParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LinearParametricEquation" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametric.#ctor(MPT.Math.Curves.LogarithmicSpiralCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametric" /> class.
            </summary>
            <param name="parent">The parent object whose properties are used in the associated parametric equations.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricBase">
            <summary>
            Class LogarithmicParametricBase.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.ComponentsLinear.LinearParametricComponentBase" />
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricBase._parent">
            <summary>
            Gets the parent object whose properties are used in the associated parametric equations.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricBase.#ctor(MPT.Math.Curves.LogarithmicSpiralCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricBase" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricX">
            <summary>
            Class LogarithmicSpiralParametricX.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricX.#ctor(MPT.Math.Curves.LogarithmicSpiralCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricX" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricX.BaseByParameter(System.Double)">
            <summary>
            Bases the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricX.PrimeByParameter(System.Double)">
            <summary>
            Primes the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricX.PrimeDoubleByParameter(System.Double)">
            <summary>
            Primes the double by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricX.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricX.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricY">
            <summary>
            Class LogarithmicSpiralParametricY.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricBase" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricBase" />
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricY.#ctor(MPT.Math.Curves.LogarithmicSpiralCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricX" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricY.BaseByParameter(System.Double)">
            <summary>
            Bases the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricY.PrimeByParameter(System.Double)">
            <summary>
            Primes the by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricY.PrimeDoubleByParameter(System.Double)">
            <summary>
            Primes the double by angle.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricY.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.LogarithmicSpirals.LogarithmicSpiralParametricY.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ValueAtPosition`1">
            <summary>
            Delegate that is used for calling a function that returns a value based on the provided parametric position.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s">The parametric position, s.</param>
            <returns>T.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.ParametricEquation`1">
            <summary>
            Base class for any type of parametric equation that returns a value of the defined type.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.IParametricEquation`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:MPT.Math.Curves.Parametrics.IParametricEquation`1" />
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.ParametricEquation`1._constantValue">
            <summary>
            The constant value that is returned, regardless of the parametric position.
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.ParametricEquation`1._valueAtPosition">
            <summary>
            The function that returns a value based on the provided parametric position.
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.ParametricEquation`1._differential">
            <summary>
            The differential of the parametric equation
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.ParametricEquation`1.Differential">
            <summary>
            Gets the differential of the parametric equation.
            </summary>
            <value>The differential.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ParametricEquation`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ParametricEquation`1"/> class that returns the supplied constant value.
            </summary>
            <param name="constantValue">The constant value that is returned, regardless of the parametric position.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ParametricEquation`1.#ctor(MPT.Math.Curves.Parametrics.ValueAtPosition{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.ParametricEquation`1"/> class that returns the result of the supplied function.
            </summary>
            <param name="function">The function that returns a value based on the provided parametric position.</param>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ParametricEquation`1.ValueAt(System.Double)">
            <summary>
            The value, at parametric position s.
            </summary>
            <param name="s">The parametric position, s.</param>
            <returns>System.Double.</returns>
            <value>The radial length.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ParametricEquation`1.HasDifferential">
            <summary>
            Determines whether this instance has a differential equation assigned.
            </summary>
            <returns><c>true</c> if this instance has differential; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.ParametricEquation`1.ConstantValue(System.Double)">
            <summary>
            The constant value, at parametric position s, that is the same for all positions.
            </summary>
            <param name="s">The parametric position, s.</param>
            <returns>T.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Parametrics.PolarParametricEquation">
            <summary>
            Class PolarParametric.
            Implements the <see cref="T:MPT.Math.Curves.Parametrics.IParametricPolar`2" />
            Implements the <see cref="T:System.ICloneable" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Parametrics.IParametricPolar`2" />
            <seealso cref="T:System.ICloneable" />
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.PolarParametricEquation._differentiationIndex">
            <summary>
            The differentiation index
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.PolarParametricEquation._radius">
            <summary>
            The x
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.PolarParametricEquation.Radius">
            <summary>
            The x-component, at position s.
            </summary>
            <value>The xcomponent.</value>
        </member>
        <member name="F:MPT.Math.Curves.Parametrics.PolarParametricEquation._azimuth">
            <summary>
            The y
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Parametrics.PolarParametricEquation.Azimuth">
            <summary>
            The y-component, at position s.
            </summary>
            <value>The ycomponent.</value>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Parametrics.PolarParametricEquation" /> class.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.Differentiate">
            <summary>
            Returns the differential of the current parametric function.
            </summary>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.DifferentiateBy(System.Int32)">
            <summary>
            Returns the current parametric function, differentiated to the specified # of times.
            </summary>
            <param name="index">The index to differentiate to, which must be greater than 0.</param>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.DifferentialFirst">
            <summary>
            Returns the first differential of the parametric function.
            </summary>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.DifferentialSecond">
            <summary>
            Returns the second differential of the parametric function.
            </summary>
            <returns>HyperbolicParametric.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.HasDifferential">
            <summary>
            Determines whether this instance can be differentiated further.
            </summary>
            <returns><c>true</c> if this instance has differential; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.op_Multiply(MPT.Math.Curves.Parametrics.PolarParametricEquation,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.op_Division(MPT.Math.Curves.Parametrics.PolarParametricEquation,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Parametrics.PolarParametricEquation.CloneParametric">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Tools.AngleBisector">
            <summary>
            Class AngleBisector.
            </summary>
        </member>
        <member name="T:MPT.Math.Curves.Tools.CurveHandle">
            <summary>
            Class CurveHandle.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Tools.CurveHandle.ControlPoint">
            <summary>
            Gets the control point.
            </summary>
            <value>The control point.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.CurveHandle.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.CurveHandle.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveHandle.#ctor(MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.CurveHandle" /> class.
            </summary>
            <param name="controlPoint">The control point, at the center of the handle.</param>
            <param name="radius">The radius of the handle.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveHandle.#ctor(MPT.Math.Coordinates.CartesianCoordinate,System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.CurveHandle" /> class.
            </summary>
            <param name="controlPoint">The control point, at the center of the handle.</param>
            <param name="radius">The radius of the handle.</param>
            <param name="rotation">The rotation of the handle.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveHandle.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveHandle.GetHandleTip">
            <summary>
            The coordinate of the handle tip.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveHandle.SetHandleTip(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Sets the handle tip to the provided coordinate.
            </summary>
            <param name="handleTip">The handle tip.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveHandle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveHandle.CloneCurve">
            <summary>
            Clones the curve.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Tools.CurveLimit">
            <summary>
            Handles limits applied to curves.
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Tools.CurveLimit._curve">
            <summary>
            The curve
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Tools.CurveLimit._limit">
            <summary>
            The limit on a cruve
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Tools.CurveLimit.Limit">
            <summary>
            The limit on a cruve.
            </summary>
            <value>The limit on a cruve.</value>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.#ctor(MPT.Math.Curves.Curve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.CurveLimit"/> class.
            </summary>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.#ctor(MPT.Math.Curves.Curve,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.CurveLimit"/> class.
            </summary>
            <param name="curve">The curve.</param>
            <param name="defaultLimit">The default limit.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.SetLimitByX(System.Double)">
            <summary>
            Sets the limit by the x-coordinate.
            </summary>
            <param name="xCoordinate">The x coordinate.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.SetLimitByY(System.Double)">
            <summary>
            Sets the limit by the y-coordinate.
            </summary>
            <param name="yCoordinate">The y coordinate.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.SetLimitByRotation(System.Double)">
            <summary>
            Sets the limit by rotation.
            </summary>
            <param name="angleRadians">The angle in radians.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.SetLimitByCoordinate(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Sets the limit by coordinate, if the coordinate lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.LimitPolar">
            <summary>
            The limit in polar coordinates.
            </summary>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.GetLimitByX(System.Double,MPT.Math.Curves.ICurvePositionCartesian)">
            <summary>
            Gets the limit by the x-coordinate.
            </summary>
            <param name="xCoordinate">The x coordinate.</param>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.GetLimitByY(System.Double,MPT.Math.Curves.ICurvePositionCartesian)">
            <summary>
            Gets the limit by the y-coordinate.
            </summary>
            <param name="yCoordinate">The y coordinate.</param>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.GetLimitByRotation(System.Double,MPT.Math.Curves.Curve)">
            <summary>
            Gets the limit by rotation.
            </summary>
            <param name="angleRadians">The angle in radians.</param>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.GetLimitByCoordinate(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Curves.ICurvePositionCartesian)">
            <summary>
            Gets the limit by coordinate, if the coordinate lies on the curve.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveLimit.CloneLimit">
            <summary>
            Clones the limit.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Tools.CurveRange">
            <summary>
            Handles limit ranges applied to curves.
            </summary>
        </member>
        <member name="F:MPT.Math.Curves.Tools.CurveRange._limitStart">
            <summary>
            The limit where the curve starts.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Tools.CurveRange.Start">
            <summary>
            The limit where the curve starts.
            </summary>
            <value>The limit start.</value>
        </member>
        <member name="F:MPT.Math.Curves.Tools.CurveRange._limitEnd">
            <summary>
            The limit where the curve ends.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Tools.CurveRange.End">
            <summary>
            The limit where the curve ends.
            </summary>
            <value>The limit end.</value>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.#ctor(MPT.Math.Curves.Curve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.CurveRange"/> class.
            </summary>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.#ctor(MPT.Math.Curves.Curve,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.CurveRange"/> class.
            </summary>
            <param name="curve">The curve.</param>
            <param name="defaultStartLimit">The default start limit.</param>
            <param name="defaultEndLimit">The default end limit.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:MPT.Math.Curves.Tools.CurveRange"/> class from being created.
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.ToOffset">
            <summary>
            Converts to cartesian offset.
            </summary>
            <returns>CartesianOffset.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.ToOffsetPolar">
            <summary>
            Converts to polar offset.
            </summary>
            <returns>PolarOffset.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.LengthLinear">
            <summary>
            The linear distance of the range.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.LengthX">
            <summary>
            The x-axis distance of the range.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.LengthY">
            <summary>
            The y-axis distance of the range.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.LengthRadius">
            <summary>
            The radial distance of the range.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.LengthRotation">
            <summary>
            The rotational distance of the range.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.LengthRotationRadians">
            <summary>
            The rotational distance of the range, in radians.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.LengthRotationDegrees">
            <summary>
            The rotational distance of the range, in degrees.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.ValidateRangeLimitRotationalHalfCirclePosition(System.Double,System.Double)">
            <summary>
            Validates the angular position provided based on +/- values of a half circle.
            </summary>
            <param name="position">The angular position, must be between -π and +π.</param>
            <param name="tolerance">The tolerance.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Relative position must be between -π and +π, but was {sRelative}.</exception>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.ValidateRangeLimitRotationalFullCirclePosition(System.Double,System.Double)">
            <summary>
            Validates the angular position provided based on + values of a full circle.
            </summary>
            <param name="position">The relative position, s. Relative position must be between 0 and +2π.</param>
            <param name="tolerance">The tolerance.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Relative position must be between 0 and +2π, but was {sRelative}.</exception>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.CurveRange.CloneRange">
            <summary>
            Clones the range limit.
            </summary>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2">
            <summary>
            Interface ICurveIntersection
            </summary>
            <typeparam name="T1">The type of curve 1.</typeparam>
            <typeparam name="T2">The type of curve 2.</typeparam>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2.Curve1">
            <summary>
            Gets the curve1.
            </summary>
            <value>The curve1.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2.Curve2">
            <summary>
            Gets the curve2.
            </summary>
            <value>The curve2.</value>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2.AreTangent">
            <summary>
            The curves are tangent to each other.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2.AreIntersecting">
            <summary>
            The curves intersect.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2.IntersectionCoordinates">
            <summary>
            The coordinate(s) of the intersection(s) of two curves.
            </summary>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="T:MPT.Math.Curves.Tools.Intersections.IntersectionAbstract`2">
            <summary>
            Class IntersectionAbstract.
            Implements the <see cref="T:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2" />
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <seealso cref="T:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2" />
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionAbstract`2.Curve1">
            <summary>
            Gets the curve1.
            </summary>
            <value>The curve1.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionAbstract`2.Curve2">
            <summary>
            Gets the curve2.
            </summary>
            <value>The curve2.</value>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionAbstract`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.Intersections.IntersectionAbstract`2" /> class.
            </summary>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The second curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionAbstract`2.AreTangent">
            <summary>
            The curves are tangent to each other.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionAbstract`2.AreIntersecting">
            <summary>
            The curves intersect and are not tangent.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionAbstract`2.IntersectionCoordinates">
            <summary>
            The coordinate of the intersection of two curves.
            </summary>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="T:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular">
            <summary>
            Class IntersectionLinearLinear.
            Implements the <see cref="T:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2" />
        </member>
        <member name="F:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular._transformations">
            <summary>
            Gets the transformations object.
            </summary>
            <value>The transformations.</value>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.#ctor(MPT.Math.Curves.CircularCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear"/> class.
            </summary>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The second curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.AreTangent">
            <summary>
            The curves are tangent to each other.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.AreIntersecting">
            <summary>
            The curves intersect and are not tangent.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.IntersectionCoordinates">
            <summary>
            The coordinate of the intersection of two curves.
            </summary>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.CenterSeparations">
            <summary>
            The separation of the centers of the curves.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.RadicalLineLength">
            <summary>
            The length of the radical line, which is the straight line connecting the two intersection points.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.CenterSeparations(MPT.Math.Curves.CircularCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            The separation of the centers of the curves.
            </summary>
            <param name="curve1">The curve1.</param>
            <param name="curve2">The curve2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.AreTangent(MPT.Math.Curves.CircularCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            Determines if the curves are tangent to each other.
            </summary>
            <param name="curve1">The curve1.</param>
            <param name="curve2">The curve2.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.AreIntersecting(MPT.Math.Curves.CircularCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            The curves intersect.
            </summary>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The first curve.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.IntersectionCoordinates(MPT.Math.Curves.CircularCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            The coordinate(s) of the intersection(s) of two curves.
            </summary>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The first curve.</param>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular._intersectionCoordinates(MPT.Math.Curves.CircularCurve,MPT.Math.Curves.CircularCurve,MPT.Math.Transformations)">
            <summary>
            The coordinate(s) of the intersection(s) of two curves.
            </summary>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The first curve.</param>
            <param name="converter">The converter.</param>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.RadicalLineLength(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The length of the radical line, which is the straight line connecting the two intersection points.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.factor(System.Double,System.Double,System.Double)">
            <summary>
            Factors the specified separation.
            </summary>
            <param name="separation">The separation.</param>
            <param name="radius1">The radius1.</param>
            <param name="radius2">The radius2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionCircularCircular.getTransformations(MPT.Math.Curves.CircularCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            Gets the transformations to use for local vs. global coordinates.
            </summary>
            <param name="circleAtOrigin">The circular curve set to the local origin.</param>
            <param name="otherCircle">The other circular curve set to the local x-axis.</param>
            <returns>Transformations.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular">
            <summary>
            Class IntersectionLinearLinear.
            Implements the <see cref="T:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2" />
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.LinearCurve">
            <summary>
            Gets the linear curve.
            </summary>
            <value>The linear curve.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.CircularCurve">
            <summary>
            Gets the circular curve.
            </summary>
            <value>The circular curve.</value>
        </member>
        <member name="F:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular._properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.#ctor(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular" /> class.
            </summary>
            <param name="linearCurve">The linear curve.</param>
            <param name="circularCurve">The circular curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.AreTangent">
            <summary>
            The curves are tangent to each other.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.AreIntersecting">
            <summary>
            The curves intersect.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionCoordinates">
            <summary>
            The coordinate of the intersection of two curves.
            </summary>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.AreTangent(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            The curves are tangent to each other.
            </summary>
            <param name="linearCurve">The linear curve.</param>
            <param name="circularCurve">The circular curve.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.AreIntersecting(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            The curves intersect.
            </summary>
            <param name="linearCurve">The linear curve.</param>
            <param name="circularCurve">The circular curve.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionCoordinates(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            The coordinate of the intersection of two curves.
            </summary>
            <param name="linearCurve">The linear curve.</param>
            <param name="circularCurve">The circular curve.</param>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular._areTangent(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.CircularCurve,MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties)">
            <summary>
            The curves are tangent to each other.
            </summary>
            <param name="linearCurve">The linear curve.</param>
            <param name="circularCurve">The circular curve.</param>
            <param name="_properties">Pre-calculated properties to be used for convenience.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular._areIntersecting(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.CircularCurve,MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties)">
            <summary>
            The curves intersect.
            </summary>
            <param name="linearCurve">The linear curve.</param>
            <param name="circularCurve">The circular curve.</param>
            <param name="_properties">Pre-calculated properties to be used for convenience.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular._intersectionCoordinates(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.CircularCurve,MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties)">
            <summary>
            The coordinate of the intersection of two curves.
            </summary>
            <param name="linearCurve">The linear curve.</param>
            <param name="circularCurve">The circular curve.</param>
            <param name="_properties">Pre-calculated properties to be used for convenience.</param>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="T:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties">
            <summary>
            Class IntersectionProperties.
            </summary>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties.Tolerance">
            <summary>
            Gets the tolerance.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties.D">
            <summary>
            Cross-product of two points defining the linear curve.
            </summary>
            <value>The d.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties.dx">
            <summary>
            X-axis distance between two points defining the linear curve.
            </summary>
            <value>The dx.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties.dy">
            <summary>
            Y-axis distance between two points defining the linear curve.
            </summary>
            <value>The dy.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties.dr">
            <summary>
            Distance between two points defining the linear curve.
            </summary>
            <value>The dr.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties.IncidenceDelta">
            <summary>
            Gets the incidence delta.
            </summary>
            <value>The incidence delta.</value>
        </member>
        <member name="P:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties.Transformations">
            <summary>
            Gets the transformations object.
            </summary>
            <value>The transformations.</value>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties.#ctor(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.CircularCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties"/> class.
            </summary>
            <param name="linearCurve">The linear curve.</param>
            <param name="circularCurve">The circular curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearCircular.IntersectionProperties.transformToLocal(MPT.Math.Curves.LinearCurve)">
            <summary>
            Returns new linear curve transformed to the local coordinates of the provided circular curve.
            </summary>
            <param name="linearCurve">The linear curve.</param>
            <returns>LinearCurve.</returns>
        </member>
        <member name="T:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear">
            <summary>
            Class IntersectionLinearLinear.
            Implements the <see cref="T:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2" />
            </summary>
            <seealso cref="T:MPT.Math.Curves.Tools.Intersections.ICurveIntersection`2" />
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear.#ctor(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.LinearCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear"/> class.
            </summary>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The second curve.</param>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear.AreTangent">
            <summary>
            The curves are tangent to each other.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear.AreIntersecting">
            <summary>
            The curves intersect and are not tangent.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear.IntersectionCoordinates">
            <summary>
            The coordinate of the intersection of two curves.
            </summary>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear.AreTangent(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.LinearCurve)">
            <summary>
            The curves are tangent to each other.
            </summary>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The first curve.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear.AreIntersecting(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.LinearCurve)">
            <summary>
            The curves intersect and are not tangent.
            </summary>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The first curve.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Curves.Tools.Intersections.IntersectionLinearLinear.IntersectionCoordinates(MPT.Math.Curves.LinearCurve,MPT.Math.Curves.LinearCurve)">
            <summary>
            The coordinate of the intersection of two curves.
            </summary>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The first curve.</param>
            <returns>CartesianCoordinate[].</returns>
        </member>
        <member name="T:MPT.Math.Generics">
            <summary>
            Contains static Math-related methods that deal with generic object types.
            </summary>
        </member>
        <member name="M:MPT.Math.Generics.GetTolerance``1(``0,System.Double)">
            <summary>
            Gets the tolerance between two items.
            This is the maximum defined, or the overwrite, if provided.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item1">The item1.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Generics.GetTolerance``2(``0,``1,System.Double)">
            <summary>
            Gets the tolerance between two items.
            This is the maximum defined, or the overwrite, if provided.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Generics.IsWithinInclusive``1(``0,``0,``0)">
            <summary>
            Determines whether the specified value is within the value bounds, including the values themselves.
            </summary>
            <param name="value">The value.</param>
            <param name="valueBound1">First value bound.</param>
            <param name="valueBound2">Second value bound.</param>
            <returns><c>true</c> if [is within inclusive] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Generics.IsWithinExclusive``1(``0,``0,``0)">
            <summary>
            Determines whether the specified value is within the value bounds, not including the values bounds themselves.
            </summary>
            <param name="value">The value.</param>
            <param name="valueBound1">First value bound.</param>
            <param name="valueBound2">Second value bound.</param>
            <returns><c>true</c> if [is within inclusive] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Generics.Max``1(``0[])">
            <summary>
            Determines the maximum of the parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentException">Argument cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Array has not been dimensioned.</exception>
        </member>
        <member name="M:MPT.Math.Generics.Min``1(``0[])">
            <summary>
            Determines the minimum of the parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentException">Argument cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Array has not been dimensioned.</exception>
        </member>
        <member name="T:MPT.Math.Geometry.GeometryLibrary">
            <summary>
            Contains static methods for common geometry operations.
            For curvature, see <a href="https://en.wikipedia.org/wiki/Curvature">Reference</a>.
            </summary>
        </member>
        <member name="M:MPT.Math.Geometry.GeometryLibrary.SlopeParametric(System.Double,System.Double)">
            <summary>
            Slope of the curve based on all differentiated components being parametric.
            </summary>
            <param name="xPrime">The first differential of x w.r.t. some parameter.</param>
            <param name="yPrime">The first differential of y w.r.t. some parameter.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Geometry.GeometryLibrary.CurvatureParametric(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Curvature of the curve based on all differentiated components being parametric.
            <a href="https://en.wikipedia.org/wiki/Curvature">Reference</a>.
            </summary>
            <param name="xPrime">The first differential of x w.r.t. some parameter.</param>
            <param name="yPrime">The first differential of y w.r.t. some parameter.</param>
            <param name="xPrimeDouble">The second differential of x w.r.t. some parameter.</param>
            <param name="yPrimeDouble">The second differential of y w.r.t. some parameter.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Geometry.GeometryLibrary.SlopeGraph(System.Double)">
            <summary>
            Slope of the curve based on all differentiated components being from the graph of a function y = f(x).
            </summary>
            <param name="yPrime">The first differential of y w.r.t. some parameter.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Geometry.GeometryLibrary.CurvatureGraph(System.Double,System.Double)">
            <summary>
            Curvature of the curve based on all differentiated components being from the graph of a function y = f(x).
            <a href="https://en.wikipedia.org/wiki/Curvature">Reference</a>.
            </summary>
            <param name="yPrime">The first differential of y w.r.t. some parameter.</param>
            <param name="yPrimeDouble">The second differential of y w.r.t. some parameter.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Geometry.GeometryLibrary.SlopePolar(System.Double,System.Double,System.Double)">
            <summary>
            Slope of the curve based on all differentiated components being the polar radius at θ differentiated by θ.
            <a href="https://socratic.org/questions/how-do-you-find-the-slope-of-a-polar-curve">Reference</a>.
            </summary>
            <param name="thetaRadians">The position θ, in radians.</param>
            <param name="radius">The polar radius at position θ.</param>
            <param name="radiusPrime">The first differential of the polar radius w.r.t. θ.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Geometry.GeometryLibrary.CurvaturePolar(System.Double,System.Double,System.Double)">
            <summary>
            Curvature of the curve based on all differentiated components being the polar radius at θ differentiated by θ.
            <a href="https://en.wikipedia.org/wiki/Curvature">Reference</a>.
            </summary>
            <param name="radius">The polar radius at position θ.</param>
            <param name="radiusPrime">The first differential of the polar radius w.r.t. θ.</param>
            <param name="radiusPrimeDouble">The second differential of the polar radius w.r.t. θ.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Geometry.GeometryLibrary.SlopeImplicit(System.Double,System.Double)">
            <summary>
            Slope of the curve based on all differentiated components being being partial derivatives of an implicit equation.
            <a href="https://en.wikipedia.org/wiki/Implicit_function">Reference</a>.
            </summary>
            <param name="Fx">For function F(x,y), partial derivative dF/dx</param>
            <param name="Fy">For function F(x,y), partial derivative dF/dy</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Geometry.GeometryLibrary.CurvatureImplicit(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Curvature of the curve based on all differentiated components being partial derivatives of an implicit equation.
            <a href="https://en.wikipedia.org/wiki/Curvature">Reference</a>.
            </summary>
            <param name="Fx">For function F(x,y), partial derivative dF/dx</param>
            <param name="Fy">For function F(x,y), partial derivative dF/dy</param>
            <param name="Fxx">For function F(x,y), partial derivative (dF/dx)/dx</param>
            <param name="Fxy">For function F(x,y), partial derivative (dF/dx)/dy</param>
            <param name="Fyy">For function F(x,y), partial derivative (dF/dy)/dy</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.ITolerance">
            <summary>
            Interface for objects that use a tolerance for floating-point numerical operations.
            </summary>
        </member>
        <member name="P:MPT.Math.ITolerance.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="T:MPT.Math.Numbers">
            <summary>
            Contains static methods dealing generically with numbers.
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.ZeroTolerance">
            <summary>
            Default zero tolerance for operations.
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.Pi">
            <summary>
            Represents the value of pi (180&#176;).
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.TwoPi">
            <summary>
            Represents the value of pi times two (360&#176;).
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.PiOver2">
            <summary>
            Represents the value of pi divided by two (90&#176;).
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.PiOver4">
            <summary>
            Represents the value of pi divided by four (45&#176;).
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.PiOver6">
            <summary>
            Represents the value of pi divided by six (30&#176;).
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.PiOver3">
            <summary>
            Represents the value of pi divided by three (60&#176;).
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.E">
            <summary>
            Represents the mathematical constant e.
            </summary>
        </member>
        <member name="M:MPT.Math.Numbers.Log10E">
            <summary>
            Represents the log base ten of e.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Log2E">
            <summary>
            Represents the log base two of e.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.GoldenRatio">
            <summary>
            The golden ratio, also known as the divine proportion, golden mean, or golden section, is a number often encountered when taking the ratios of distances in simple geometric figures such as the pentagon, pentagram, decagon and dodecahedron.
            It is denoted phi and is approximately 1.618033988749...
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsPositiveSign(System.Double,System.Double)">
            <summary>
            Value is greater than the zero-tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is positive sign] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsNegativeSign(System.Double,System.Double)">
            <summary>
            Value is less than the zero-tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is negative sign] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsZeroSign(System.Double,System.Double)">
            <summary>
            Value is within the absolute value of the zero-tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is zero sign] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Sign(System.Double,System.Double)">
            <summary>
            Returns the sign of a value as either 1 (positive or 0), or -1 (negative).
            </summary>
            <param name="value">The value.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Value is equal to the provided value within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is equal to] [the specified value1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsGreaterThan(System.Double,System.Double,System.Double)">
            <summary>
            Value is greater than the provided value, within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is greater than] [the specified value1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsLessThan(System.Double,System.Double,System.Double)">
            <summary>
            Value is less than the provided value, within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is less than] [the specified value1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Values are equal within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsGreaterThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value2].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value2]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsLessThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value2].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value2]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsWithinInclusive(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified value is within the value bounds, including the values themselves.
            </summary>
            <param name="value">The value.</param>
            <param name="valueBound1">First value bound.</param>
            <param name="valueBound2">Second value bound.</param>
            <param name="tolerance">The tolerance used in comparing against the bounds.</param>
            <returns><c>true</c> if [is within inclusive] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsWithinExclusive(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified value is within the value bounds, not including the values bounds themselves.
            </summary>
            <param name="value">The value.</param>
            <param name="valueBound1">First value bound.</param>
            <param name="valueBound2">Second value bound.</param>
            <param name="tolerance">The tolerance used in comparing against the bounds.</param>
            <returns><c>true</c> if [is within inclusive] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsOdd(System.Int32)">
            <summary>
            Value is an odd number.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is odd; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsEven(System.Int32)">
            <summary>
            Value is an even number.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is even; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsPrime(System.Int32)">
            <summary>
            A whole number greater than 1, whose only two whole-number factors are 1 and itself.
            Uses the 'Sieve of Eratosthenes', which is very efficient for solving small primes (i.e. &lt; 10,000,000,000).
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is prime; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsComposite(System.Int32)">
            <summary>
            A whole number that can be divided evenly by numbers other than 1 or itself.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is composite; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.LastDigit(System.Int32)">
            <summary>
            Returns the last digit without sign of the value provided.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.DecimalPlaces(System.Double,System.Boolean)">
            <summary>
            Number of decimal places.
            Note that for non-scientific notation, the maximum that may be returned is (# decimal places) &lt;= 15 - (# whole numbers, not including leading 0s).
            </summary>
            <param name="value">The value.</param>
            <param name="limitForRounding">If set to <c>true</c>, results are limited to a range that is appropriate for rounding methods (0 &lt;= value &lt;= 15).
            Not using this limit may result in a thrown exception when rounding.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.SignificantFigures(System.Double,System.Int32)">
            <summary>
            Number of significant figures.
            From: https://en.wikipedia.org/wiki/Significant_figures#Identifying_significant_figures
            </summary>
            <seealso cref="M:MPT.Math.Numbers.SignificantFigures(System.Double,System.Int32)">https://en.wikipedia.org/wiki/Significant_figures#Identifying_significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="decimalDigitsTolerance">Tolerance limit to avoid spurious digits, in number of decimal places to include.
            Numbers beyond this are truncated.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Max(System.Double[])">
            <summary>
            Determines the maximum of the parameters.
            </summary>
            <param name="items">The items.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentException">Argument cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Array has not been dimensioned.</exception>
        </member>
        <member name="M:MPT.Math.Numbers.Min(System.Double[])">
            <summary>
            Determines the minimum of the parameters.
            </summary>
            <param name="items">The items.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentException">Argument cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Array has not been dimensioned.</exception>
        </member>
        <member name="M:MPT.Math.Numbers.Squared(System.Int32)">
            <summary>
            Returns the value squared..
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Squared(System.Double)">
            <summary>
            Returns the value squared.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Cubed(System.Int32)">
            <summary>
            Returns the value cubed.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Cubed(System.Double)">
            <summary>
            Returns the value cubed.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Pow(System.Double,System.Double)">
            <summary>
            Returns the value raised to the power provided.
            </summary>
            <param name="value">The value.</param>
            <param name="power">The power.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.DivideByZeroException"></exception>
        </member>
        <member name="M:MPT.Math.Numbers.Sqrt(System.Double)">
            <summary>
            Returns the square root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.CubeRoot(System.Double)">
            <summary>
            Returns the cube root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Root(System.Double,System.Int32)">
            <summary>
            Returns the root of the number.
            </summary>
            <param name="value">The value.</param>
            <param name="root">The root.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Root(System.Double,System.Double)">
            <summary>
            Returns the root of the number.
            </summary>
            <param name="value">The value.</param>
            <param name="root">The root.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.ValueAsZeroIfWithinAbsoluteTolerance(System.Double,System.Double)">
            <summary>
            Sets value to zero if within absolute tolerance (exclusive), otherwise returns value.
            </summary>
            <param name="value">The value.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Factorial(System.Int32)">
            <summary>
            The product of an integer and all the integers below it; e.g., factorial four ( 4! ) is equal to 24.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.PlusMinus(System.Int32,System.Int32)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue">The base value.</param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:MPT.Math.Numbers.PlusMinus(System.Double,System.Double)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue">The base value.</param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Limit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value.
            If value is greater than max, max will be returned.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
            <exception cref="T:System.ArgumentException">Max limit, {max}, is less than the min limit, {min}</exception>
        </member>
        <member name="M:MPT.Math.Numbers.Limit(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value.
            If value is greater than max, max will be returned.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
            <exception cref="T:System.ArgumentException">Max limit, {max}, is less than the min limit, {min}</exception>
        </member>
        <member name="M:MPT.Math.Numbers.RoundToSignificantFigures(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">
            <summary>
            Rounds to significant figures.
            </summary>
            <seealso cref="M:MPT.Math.Numbers.RoundToSignificantFigures(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">https://en.wikipedia.org/wiki/Significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="significantFigures">The number of significant figures.</param>
            <param name="roundingTieBreaker">Method by which rounding is performed if the triggering rounding number is 5.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.RoundToDecimalPlaces(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">
            <summary>
            Rounds to decimal places.
            </summary>
            <seealso cref="M:MPT.Math.Numbers.RoundToDecimalPlaces(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">https://en.wikipedia.org/wiki/Significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <param name="roundingTieBreaker">Method by which rounding is performed if the triggering rounding number is 5.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.midpointRounding(MPT.Math.RoundingTieBreaker)">
            <summary>
            Returns System.Math enum for the corresponding midpoint rounding method.
            </summary>
            <param name="roundingTieBreaker">The rounding tie breaker.</param>
            <returns>MidpointRounding.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.DisplayRoundedToSignificantFigures(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">
            <summary>
            Rounds to significant figures.
            </summary>
            <seealso cref="M:MPT.Math.Numbers.RoundToSignificantFigures(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">https://en.wikipedia.org/wiki/Significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="significantFigures">The number of significant figures.</param>
            <param name="roundingTieBreaker">Method by which rounding is performed if the triggering rounding number is 5.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.DisplayRoundedToDecimalPlaces(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">
            <summary>
            Rounds to decimal places.
            </summary>
            <seealso cref="M:MPT.Math.Numbers.RoundToDecimalPlaces(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">https://en.wikipedia.org/wiki/Significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <param name="roundingTieBreaker">Method by which rounding is performed if the triggering rounding number is 5.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary">
            <summary>
            Contains extension methods dealing generically with numbers. 
            </summary>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsPositiveSign(System.Int32)">
            <summary>
            Value is greater than 0.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsPositiveSign(System.Double,System.Double)">
            <summary>
            Value is greater than the zero-tolerance.
            </summary>
            <param name="value"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsNegativeSign(System.Int32)">
            <summary>
            Value is less than zero.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsNegativeSign(System.Double,System.Double)">
            <summary>
            Value is less than the zero-tolerance.
            </summary>
            <param name="value"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsZeroSign(System.Double,System.Double)">
            <summary>
            Value is within the absolute value of the zero-tolerance.
            </summary>
            <param name="value"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Sign(System.Int32,System.Double)">
            <summary>
            Returns the sign of a value as either 1 (positive or 0), or -1 (negative).
            </summary>
            <param name="value"></param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Sign(System.Double,System.Double)">
            <summary>
            Returns the sign of a value as either 1 (positive or 0), or -1 (negative).
            </summary>
            <param name="value"></param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Value is equal to the provided value within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsGreaterThan(System.Double,System.Double,System.Double)">
            <summary>
            Value is greater than the provided value, within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsLessThan(System.Double,System.Double,System.Double)">
            <summary>
            Value is less than the provided value, within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsGreaterThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value2].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value2]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsLessThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value2].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value2]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsWithinInclusive(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the number is within the value bounds, including the values themselves.
            </summary>
            <param name="value">The value.</param>
            <param name="valueBound1">First value bound.</param>
            <param name="valueBound2">Second value bound.</param>
            <returns><c>true</c> if [is within inclusive] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsWithinInclusive(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the number is within the value bounds, including the values themselves.
            </summary>
            <param name="value">The number.</param>
            <param name="valueBound1">First value bound.</param>
            <param name="valueBound2">Second value bound.</param>
            <param name="tolerance">The tolerance used in comparing against the bounds.</param>
            <returns><c>true</c> if [is within inclusive] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsWithinExclusive(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the number is within the value bounds, not including the values bounds themselves.
            </summary>
            <param name="value">The number.</param>
            <param name="valueBound1">First value bound.</param>
            <param name="valueBound2">Second value bound.</param>
            <returns><c>true</c> if [is within inclusive] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsWithinExclusive(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the number is within the value bounds, not including the values bounds themselves.
            </summary>
            <param name="value">The number.</param>
            <param name="valueBound1">First value bound.</param>
            <param name="valueBound2">Second value bound.</param>
            <param name="tolerance">The tolerance used in comparing against the bounds.</param>
            <returns><c>true</c> if [is within inclusive] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsOdd(System.Int32)">
            <summary>
            Value is an odd number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsEven(System.Int32)">
            <summary>
            Value is an even number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsPrime(System.Int32)">
            <summary>
            A whole number greater than 1, whose only two whole-number factors are 1 and itself. 
            Uses the 'Sieve of Eratosthenes', which is very efficient for solving small primes (i.e. &lt; 10,000,000,000).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsComposite(System.Int32)">
            <summary>
            A whole number that can be divided evenly by numbers other than 1 or itself.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.LastDigit(System.Int32)">
            <summary>
            Returns the last digit without sign of the value provided.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Squared(System.Int32)">
            <summary>
            Returns the value squared..
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Squared(System.Double)">
            <summary>
            Returns the value squared.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Cubed(System.Int32)">
            <summary>
            Returns the value cubed.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Cubed(System.Double)">
            <summary>
            Returns the value cubed.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Sqrt(System.Int32)">
            <summary>
            Returns the square root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Sqrt(System.Double)">
            <summary>
            Returns the square root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.CubeRoot(System.Int32)">
            <summary>
            Returns the cube root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.CubeRoot(System.Double)">
            <summary>
            Returns the cube root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Root(System.Double,System.Int32)">
            <summary>
            Returns the root of the number.
            </summary>
            <param name="value">The value.</param>
            <param name="root">The root.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Root(System.Double,System.Double)">
            <summary>
            Returns the root of the number.
            </summary>
            <param name="value">The value.</param>
            <param name="root">The root.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Pow(System.Int32,System.Double)">
            <summary>
            Returns the value raised to the power provided.
            </summary>
            <param name="value"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Pow(System.Double,System.Double)">
            <summary>
            Returns the value raised to the power provided.
            </summary>
            <param name="value"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Factorial(System.Int32)">
            <summary>
            The product of an integer and all the integers below it; e.g., factorial four ( 4! ) is equal to 24.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.PlusMinus(System.Int32,System.Int32)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue"></param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.PlusMinus(System.Int32,System.Double)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue"></param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.PlusMinus(System.Double,System.Double)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue"></param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Limit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. 
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. 
            If value is greater than max, max will be returned.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Limit(System.Int32,System.Double,System.Double)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. 
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. 
            If value is greater than max, max will be returned.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Limit(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. 
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. 
            If value is greater than max, max will be returned.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Abs(System.Double)">
            <summary>
            Returns the absolute value of the number.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Abs(System.Int32)">
            <summary>
            Returns the absolute value of the number.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.RoundToSignificantFigures(System.Int32,System.Int32,MPT.Math.RoundingTieBreaker)">
            <summary>
            Rounds to significant figures.
            </summary>
            <seealso cref="M:MPT.Math.Numbers.RoundToSignificantFigures(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">https://en.wikipedia.org/wiki/Significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="significantFigures">The number of significant figures.</param>
            <param name="roundingTieBreaker">Method by which rounding is performed if the triggering rounding number is 5.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.RoundToSignificantFigures(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">
            <summary>
            Rounds to significant figures.
            </summary>
            <seealso cref="M:MPT.Math.Numbers.RoundToSignificantFigures(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">https://en.wikipedia.org/wiki/Significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="significantFigures">The number of significant figures.</param>
            <param name="roundingTieBreaker">Method by which rounding is performed if the triggering rounding number is 5.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.RoundToDecimalPlaces(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">
            <summary>
            Rounds to decimal places.
            </summary>
            <seealso cref="M:MPT.Math.Numbers.RoundToDecimalPlaces(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">https://en.wikipedia.org/wiki/Significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <param name="roundingTieBreaker">Method by which rounding is performed if the triggering rounding number is 5.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.DisplayRoundedToSignificantFigures(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">
            <summary>
            Rounds to significant figures.
            </summary>
            <seealso cref="M:MPT.Math.Numbers.RoundToSignificantFigures(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">https://en.wikipedia.org/wiki/Significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="significantFigures">The number of significant figures.</param>
            <param name="roundingTieBreaker">Method by which rounding is performed if the triggering rounding number is 5.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.DisplayRoundedToDecimalPlaces(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">
            <summary>
            Rounds to decimal places.
            </summary>
            <seealso cref="M:MPT.Math.Numbers.RoundToDecimalPlaces(System.Double,System.Int32,MPT.Math.RoundingTieBreaker)">https://en.wikipedia.org/wiki/Significant_figures</seealso>
            <param name="value">The value.</param>
            <param name="decimalPlaces">The number of decimal places.</param>
            <param name="roundingTieBreaker">Method by which rounding is performed if the triggering rounding number is 5.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.RoundingTieBreaker">
            <summary>
            Methods for breaking ties in rounding (i.e. when the number triggering rounding is 5).
            </summary>
        </member>
        <member name="F:MPT.Math.RoundingTieBreaker.HalfAwayFromZero">
            <summary>
            Rounds to the number farthest away from 0 (e.g. 1.25 -> 1.3, -1.25 -> -1.3).
            </summary>
        </member>
        <member name="F:MPT.Math.RoundingTieBreaker.HalfToEven">
            <summary>
            Rounds to the nearest even number (e.g. 1.25 -> 1.2, 1.35 -> 1.4) 
            This is the method preferred by many scientific disciplines, because, for example, it avoids skewing the average value of a long list of values upwards.
            </summary>
        </member>
        <member name="T:MPT.Math.Transformations">
            <summary>
            Handles transformations between global coordinates and local coordinates.
            </summary>
        </member>
        <member name="P:MPT.Math.Transformations.LocalOrigin">
            <summary>
            Gets the local origin.
            </summary>
            <value>The local origin.</value>
        </member>
        <member name="P:MPT.Math.Transformations.LocalAxisX">
            <summary>
            Gets the local axis x.
            </summary>
            <value>The local axis x.</value>
        </member>
        <member name="P:MPT.Math.Transformations.Rotation">
            <summary>
            Gets the rotation.
            </summary>
            <value>The rotation.</value>
        </member>
        <member name="P:MPT.Math.Transformations.Displacement">
            <summary>
            Gets the displacement.
            </summary>
            <value>The displacement.</value>
        </member>
        <member name="M:MPT.Math.Transformations.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Transformations"/> class.
            </summary>
            <param name="localOriginInGlobal">The local origin in global coordinates.</param>
            <param name="localAxisXPtInGlobal">Any point along the local x-axis in global coordinates.</param>
        </member>
        <member name="M:MPT.Math.Transformations.TransformToGlobal(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Transforms to global.
            </summary>
            <param name="localCoordinate">The local coordinate.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Transformations.TransformToLocal(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Transforms to local.
            </summary>
            <param name="globalCoordinate">The global coordinate.</param>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="T:MPT.Math.Trigonometry.TrigonometryLibrary">
            <summary>
            Library of trigonometric calculations.
            </summary>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Sin(System.Double)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Cos(System.Double)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Tan(System.Double,System.Double)">
            <summary>
            Returns the tangent of the specified angle.
            Returns <see cref="F:System.Double.NegativeInfinity" /> if angle is a multiple of -π/2 or -(3/2)*π.
            Returns <see cref="F:System.Double.PositiveInfinity" /> if angle is a multiple of +π/2 or +(3/2)*π.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.ArcSin(System.Double)">
            <summary>
            Returns the angle whose sine is the specified ratio.
            </summary>
            <param name="ratio">The ratio of 'opposite / hypotenuse'.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.ArcCos(System.Double)">
            <summary>
            Returns the angle whose cosine is the specified ratio.
            </summary>
            <param name="ratio">The ratio of 'adjacent / hypotenuse'.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.ArcTan(System.Double)">
            <summary>
            Returns the angle whose tangent is the specified ratio.
            </summary>
            <param name="ratio">The ratio of 'opposite / adjacent'.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.SinH(System.Double)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.CosH(System.Double)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.TanH(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Sec(System.Double,System.Double)">
            <summary>
            Returns the secant of the specified angle.
            Returns <see cref="F:System.Double.NegativeInfinity" /> if angle is a multiple of +/- π/2.
            Returns <see cref="F:System.Double.PositiveInfinity" /> if 0 or angle is a multiple of +/- (3/2)*π.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Csc(System.Double,System.Double)">
            <summary>
            Returns the cosecant of the specified angle.
            Returns <see cref="F:System.Double.NegativeInfinity" /> if angle is a multiple of -π or +2π.
            Returns <see cref="F:System.Double.PositiveInfinity" /> if 0 or angle is a multiple of +π or -2π.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Cot(System.Double,System.Double)">
            <summary>
            Returns the cotangent of the specified angle.
            Returns <see cref="F:System.Double.NegativeInfinity" /> if angle is a multiple of +π or +2π.
            Returns <see cref="F:System.Double.PositiveInfinity" /> if 0 or angle is a multiple of -π or -2π.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.Vectors.Vector">
            <summary>
            Represents a linear curve vector in 2D space.
            </summary>
            Implements the <see cref="T:System.IEquatable`1" />
            Implements the <see cref="T:MPT.Math.ITolerance" /><seealso cref="T:System.IEquatable`1" /><seealso cref="T:MPT.Math.ITolerance" />
        </member>
        <member name="P:MPT.Math.Vectors.Vector.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Vectors.Vector.Xcomponent">
            <summary>
            Gets the x-component of this vector.
            </summary>
            <value>The xcomponent.</value>
        </member>
        <member name="P:MPT.Math.Vectors.Vector.Ycomponent">
            <summary>
            Gets the y-component of this vector.
            </summary>
            <value>The ycomponent.</value>
        </member>
        <member name="F:MPT.Math.Vectors.Vector._location">
            <summary>
            The location
            </summary>
        </member>
        <member name="P:MPT.Math.Vectors.Vector.Location">
            <summary>
            Gets the location of this vector in Euclidean space.
            </summary>
            <value>The location.</value>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Magnitude">
            <summary>
            Length of this vector.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="P:MPT.Math.Vectors.Vector.MagnitudeSquared">
            <summary>
            Gets the square of the length of this vector.
            </summary>
            <value>The magnitude squared.</value>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the class with a vector structure.
            </summary>
            <param name="xMagnitude">The x magnitude.</param>
            <param name="yMagnitude">The y magnitude.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.#ctor(System.Double,System.Double,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes the class with a vector structure and a point coinciding with the location of the vector.
            </summary>
            <param name="xMagnitude">The x magnitude.</param>
            <param name="yMagnitude">The y magnitude.</param>
            <param name="location">The location.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Vectors.Vector" /> struct.
            </summary>
            <param name="pointI">The starting point, i.</param>
            <param name="pointJ">The ending point, j.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsCollinearSameDirection(MPT.Math.Vectors.Vector)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the same direction.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if [is collinear same direction] [the specified vector]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConcave(MPT.Math.Vectors.Vector)">
            <summary>
            Vectors form a concave angle.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if the specified vector is concave; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsOrthogonal(MPT.Math.Vectors.Vector)">
            <summary>
            Vectors form a 90 degree angle.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if the specified vector is orthogonal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConvex(MPT.Math.Vectors.Vector)">
            <summary>
            Vectors form a convex angle.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if the specified vector is convex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsCollinearOppositeDirection(MPT.Math.Vectors.Vector)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the opposite direction.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if [is collinear opposite direction] [the specified vector]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConcaveInside(MPT.Math.Vectors.Vector)">
            <summary>
            True: The concave side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConvexInside(MPT.Math.Vectors.Vector)">
            <summary>
            True: The convex side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.ConcavityCollinearity(MPT.Math.Vectors.Vector)">
            <summary>
            Returns a value indicating the concavity of the vectors.
            1 = Pointing the same way.
            &gt; 0 = Concave.
            0 = Orthogonal.
            &lt; 0 = Convex.
            -1 = Pointing the exact opposite way.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.DotProduct(MPT.Math.Vectors.Vector)">
            <summary>
            Dot product of two vectors.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.CrossProduct(MPT.Math.Vectors.Vector)">
            <summary>
            Cross-product of two vectors.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Angle">
            <summary>
            Returns the angle [radians] of a vector from the origin axis (x-axis, positive for counter-clockwise).
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Angle(MPT.Math.Vectors.Vector)">
            <summary>
            Returns the angle [radians] between the two vectors, which is a value between 0 and +π.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Area(MPT.Math.Vectors.Vector)">
            <summary>
            Returns the area between two vectors.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitVector">
            <summary>
            Returns a normalized vector.
            </summary>
            <returns>Vector.</returns>
            <exception cref="T:System.Exception">Ill-formed vector. Vector magnitude cannot be zero.</exception>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitTangentVector">
            <summary>
            Returns the tangent unit vector.
            </summary>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitNormalVector">
            <summary>
            Returns a normal unit vector.
            </summary>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitVector(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Returns a normalized vector to the supplied points.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
            <exception cref="T:System.Exception">Ill-formed vector. Vector magnitude cannot be zero.</exception>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitVector(System.Double,System.Double,System.Double)">
            <summary>
            Returns a normalized vector.
            </summary>
            <param name="xComponent">The x component.</param>
            <param name="yComponent">The y component.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
            <exception cref="T:System.Exception">Ill-formed vector. Vector magnitude cannot be zero.</exception>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitTangentVector(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Returns the tangent unit vector to the supplied points.
            </summary>
            <param name="i">First point.</param>
            <param name="j">Second point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitTangentVector(System.Double,System.Double,System.Double)">
            <summary>
            Returns the tangent unit vector to the supplied components.
            </summary>
            <param name="xComponent">The x component.</param>
            <param name="yComponent">The y component.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitNormalVector(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Returns a normal unit vector to the supplied points.
            </summary>
            <param name="i">First point.</param>
            <param name="j">Second point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitNormalVector(System.Double,System.Double,System.Double)">
            <summary>
            Returns a normal unit vector to the supplied components.
            </summary>
            <param name="xComponent">The x component.</param>
            <param name="yComponent">The y component.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Angle(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Returns the angle [radians] between the two vectors, which is a value between 0 and +π.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsCollinearSameDirection(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the same direction.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if [is collinear same direction] [the specified vector1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConcave(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Vectors form a concave angle.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the specified vector1 is concave; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsOrthogonal(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Vectors form a 90 degree angle.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the specified vector1 is orthogonal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConvex(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Vectors form a convex angle.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the specified vector1 is convex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsCollinearOppositeDirection(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the opposite direction.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if [is collinear opposite direction] [the specified vector1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConcaveInside(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            True: The concave side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if [is concave inside] [the specified vector1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConvexInside(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            True: The convex side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if [is convex inside] [the specified vector1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.ConcavityCollinearity(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Returns a value indicating the concavity of the vectors.
            1 = Pointing the same way.
            &gt; 0 = Concave.
            0 = Orthogonal.
            &lt; 0 = Convex.
            -1 = Pointing the exact opposite way.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.getXComponent(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Gets the x component.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.getYComponent(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Gets the y component.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Equals(MPT.Math.Vectors.Vector)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Equality(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Inequality(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Addition(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Subtraction(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Multiply(MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Multiply(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Division(MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Vectors.VectorLibrary">
            <summary>
            Contains static methods for common vector operations.
            </summary>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.Magnitude(System.Double,System.Double,System.Double)">
            <summary>
            Gets the magnitude from parametric vector components.
            </summary>
            <param name="xComponent">The x component.</param>
            <param name="yComponent">The y component.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.Exception">Ill-formed vector. Vector magnitude cannot be zero.</exception>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.DotProduct(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the dot product of parametric vector components.
            x1*x2 + y1*y2
            </summary>
            <param name="x1">The x component of the first vector.</param>
            <param name="y1">The y component of the first vector.</param>
            <param name="x2">The x component of the second vector.</param>
            <param name="y2">The y component of the second vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.CrossProduct(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the cross product/determinant of parametric vector components.
            x1*y2 - x2*y1
            </summary>
            <param name="x1">The x component of the first vector.</param>
            <param name="y1">The y component of the first vector.</param>
            <param name="x2">The x component of the second vector.</param>
            <param name="y2">The y component of the second vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.Magnitude3D(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the magnitude from parametric vector components.
            </summary>
            <param name="xComponent">The x component.</param>
            <param name="yComponent">The y component.</param>
            <param name="zComponent">The z component.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.Exception">Ill-formed vector. Vector magnitude cannot be zero.</exception>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.DotProduct3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the dot product of the points.
            </summary>
            <param name="x1">The x component of the first vector.</param>
            <param name="y1">The y component of the first vector.</param>
            <param name="z1">The z component of the first vector.</param>
            <param name="x2">The x component of the second vector.</param>
            <param name="y2">The y component of the second vector.</param>
            <param name="z2">The z component of the second vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.CrossProduct3D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the cross product/determinant of the points.
            </summary>
            <param name="x1">The x component of the first vector.</param>
            <param name="y1">The y component of the first vector.</param>
            <param name="z1">The z component of the first vector.</param>
            <param name="x2">The x component of the second vector.</param>
            <param name="y2">The y component of the second vector.</param>
            <param name="z2">The z component of the second vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.validatedMagnitude(System.Double,System.Double)">
            <summary>
            Validateds the magnitude.
            </summary>
            <param name="magnitude">The magnitude.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.Exception">Ill-formed vector. Vector magnitude cannot be zero.</exception>
        </member>
        <member name="T:MPT.Math.Vectors.VectorParametric">
            <summary>
            Represents a parametric vector in 2D space.
            This is used for non-linear curves.
            Implements the <see cref="T:System.IEquatable`1" />
            Implements the <see cref="T:MPT.Math.ITolerance" />
            </summary>
            <seealso cref="T:System.IEquatable`1" />
            <seealso cref="T:MPT.Math.ITolerance" />
        </member>
        <member name="P:MPT.Math.Vectors.VectorParametric.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="F:MPT.Math.Vectors.VectorParametric._curveParametric">
            <summary>
            The associated parametric function.
            </summary>
        </member>
        <member name="P:MPT.Math.Vectors.VectorParametric.CurveParametric">
            <summary>
            The associated parametric function.
            </summary>
            <value>The curve parametric.</value>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.#ctor(MPT.Math.Curves.Parametrics.LinearParametricEquation,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Vectors.VectorParametric" /> class that is based on the provided parametric function.
            </summary>
            <param name="parametricCartesian">The parametric function.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.Differentiate">
            <summary>
            Returns a differential of the parametric vector.
            For any component that no longer has a differential, the associated function returns a pre-defined constant value.
            </summary>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.HasDifferential">
            <summary>
            Determines whether this instance can be differentiated further.
            </summary>
            <returns><c>true</c> if this instance has differential; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.Magnitude(System.Double)">
            <summary>
            Magnitudes the specified angle radians.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.Curvature(System.Double)">
            <summary>
            Curvatures the specified angle radians.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.UnitVectorAt(System.Double)">
            <summary>
            Units the vector at.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.UnitTangentVectorAt(System.Double)">
            <summary>
            Units the tangent vector at.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.UnitNormalVectorAt(System.Double)">
            <summary>
            Units the normal vector at.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>VectorParametric.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.ToVectorAt(System.Double)">
            <summary>
            Converts to vectorat.
            </summary>
            <param name="angleRadians">The angle radians.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.DotProductAt(MPT.Math.Vectors.VectorParametric,System.Double)">
            <summary>
            Dot product of two vectors.
            </summary>
            <param name="vector">The vector.</param>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.CrossProductAt(MPT.Math.Vectors.VectorParametric,System.Double)">
            <summary>
            Cross-product of two vectors.
            </summary>
            <param name="vector">The vector.</param>
            <param name="angleRadians">The angle radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.op_Multiply(MPT.Math.Vectors.VectorParametric,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorParametric.op_Division(MPT.Math.Vectors.VectorParametric,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
    </members>
</doc>
