<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MPT.Math</name>
    </assembly>
    <members>
        <member name="T:MPT.Math.Algebra.AlgebraLibrary">
            <summary>
            Contains static methods for common algebraic operations.
            </summary>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.QuadraticFormula(System.Double,System.Double,System.Double)">
            <summary>
            Returns the 2 x solutions to the equation ax^2 + bx + c = 0.
            </summary>
            <param name="a">Multiplier to x^2.</param>
            <param name="b">Multiplier to x.</param>
            <param name="c">Constant.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.CubicCurveLowestRoot(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the least positive solution to the equation ax^3 + bx^2 + cx + d = 0.
            From: https://mathworld.wolfram.com/CubicFormula.html
            </summary>
            <param name="a">Multiplier to x^3.</param>
            <param name="b">Multiplier to x^2.</param>
            <param name="c">Multiplier to x.</param>
            <param name="d">Constant.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.cubicCurveLeastRootNormalized(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the least positive solution to the equation x^3 + a2x^2 + a1x + a0 = 0.
            </summary>
            <param name="a1">Multiplier to x^2.</param>
            <param name="a2">Multiplier to x.</param>
            <param name="B">Derived constant.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.CubicCurveRoots(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the 3 'x' solutions to the equation ax^3 + bx^2 + cx + d = 0.
            From: https://mathworld.wolfram.com/CubicFormula.html
            </summary>
            <param name="a">Multiplier to x^3.</param>
            <param name="b">Multiplier to x^2.</param>
            <param name="c">Multiplier to x.</param>
            <param name="d">Constant.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.cubicCurveRootsNormalized(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the 3 'x' solutions to the equation x^3 + a2*x^2 + a1*x + a0 = 0.
            </summary>
            <param name="a0">Constant.</param>
            <param name="a1">Multiplier to x.</param>
            <param name="a2">Multiplier to x^2.</param>
            <param name="returnFirstRoot"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.InterpolationLinear(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="value1">First value.</param>
            <param name="value2">Second value.</param>
            <param name="point2Weight">Value between 0 and 1 indicating the weight of the second value.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.InterpolationLinear(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Linearly interpolates between two values.
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <param name="point2Weight">Value between 0 and 1 indicating the weight of the second point.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.InterpolationPolynomial(MPT.Math.Coordinates.CartesianCoordinate[],System.Double)">
            <summary>
            Interpolates the polynomial.
            From: https://en.wikipedia.org/wiki/Polynomial_interpolation
            </summary>
            <param name="points">The points.</param>
            <param name="amount">The amount.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.InterpolationLinear2D(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Lineary interpolates across a 2D plane to return an interpolated third dimensional value.
            </summary>
            <param name="Po">The point in the plane to get the corresponding magnitude of.</param>
            <param name="ii">Point ii (closest to the origin), where <see cref="P:MPT.Math.Coordinates3D.CartesianCoordinate3D.Z" /> is the corresponding magnitude.</param>
            <param name="ij">Point ij (farthest from the y-axis), where <see cref="P:MPT.Math.Coordinates3D.CartesianCoordinate3D.Z" /> property is the corresponding magnitude.</param>
            <param name="ji">Point ji (farthest from the x-axis), where <see cref="P:MPT.Math.Coordinates3D.CartesianCoordinate3D.Z" /> property is the corresponding magnitude.</param>
            <param name="jj">Point jj (farthest from the origin), where <see cref="P:MPT.Math.Coordinates3D.CartesianCoordinate3D.Z" /> property is the corresponding magnitude.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.IntersectionX(System.Double,MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            X-coordinate of a horizontal line intersecting the line described by the points provided.
            </summary>
            <param name="y">Y-coordinate of the horizontal line.</param>
            <param name="I">First point.</param>
            <param name="J">Second point.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.IntersectionX(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            X-coordinate of a horizontal line intersecting the line described by the points provided.
            </summary>
            <param name="y">Y-coordinate of the horizontal line.</param>
            <param name="x1">X-coordinate of first point.</param>
            <param name="y1">Y-coordinate of first point.</param>
            <param name="x2">X-coordinate of second point.</param>
            <param name="y2">Y-coordinate of second point.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.Algebra.AlgebraLibrary.SRSS(System.Double[])">
            <summary>
            Performs the square root of the sum of the squares of the provided values.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.Math.CoordinateConverters.Cartesian2DPolarConverter">
            <summary>
            Class Cartesian2DPolarConverter.
            </summary>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.Cartesian2DPolarConverter.ToPolar(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Converts to Polar coordinates.
            </summary>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.Cartesian2DPolarConverter.ToCartesian(MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Converts to Cartesian coordinates.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="T:MPT.Math.CoordinateConverters.Cartesian3DCylindricalConverter">
            <summary>
            Class Cartesian3DCylindricalConverter.
            </summary>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.Cartesian3DCylindricalConverter.ToCylindrical(MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Converts to cylindrical coordinates.
            </summary>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.Cartesian3DCylindricalConverter.ToCartesian(MPT.Math.Coordinates3D.CylindricalCoordinate)">
            <summary>
            Converts to Cartesian coordinates.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="T:MPT.Math.CoordinateConverters.Cartesian3DSphericalConverter">
            <summary>
            Class Cartesian3DSphericalConverter.
            </summary>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.Cartesian3DSphericalConverter.ToSpherical(MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Converts to spherical coordinates.
            </summary>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.Cartesian3DSphericalConverter.ToCartesian(MPT.Math.Coordinates3D.SphericalCoordinate)">
            <summary>
            Converts to Cartesian coordinates.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="T:MPT.Math.CoordinateConverters.CylindricalSphericalConverter">
            <summary>
            Class CylindricalSphericalConverter.
            </summary>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.CylindricalSphericalConverter.ToSpherical(MPT.Math.Coordinates3D.CylindricalCoordinate)">
            <summary>
            Converts to spherical coordinates.
            </summary>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.CoordinateConverters.CylindricalSphericalConverter.ToCylindrical(MPT.Math.Coordinates3D.SphericalCoordinate)">
            <summary>
            Converts to cylindrical coordinates.
            </summary>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates3D.CartesianCoordinate3D">
            <summary>
            A three-dimensional coordinate system that specifies each point uniquely in a plane by a set of numerical coordinates, which are the signed distances to the point from two fixed perpendicular oriented lines, measured in the same unit of length.
            </summary>
            <seealso ref="https://en.wikipedia.org/wiki/Cartesian_coordinate_system"/>
            <seealso ref="https://en.wikipedia.org/wiki/Euclidean_space"/>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates3D.CartesianCoordinate3D.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CartesianCoordinate3D.X">
            <summary>
            Gets the x.
            </summary>
            <value>The x.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CartesianCoordinate3D.Y">
            <summary>
            Gets the y.
            </summary>
            <value>The y.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CartesianCoordinate3D.Z">
            <summary>
            Gets the z.
            </summary>
            <value>The z.</value>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates3D.CartesianCoordinate3D"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.CrossProduct(MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Crosses the product.
            </summary>
            <param name="point">The point.</param>
            <returns>Point3D.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.DotProduct(MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Dots the product.
            </summary>
            <param name="point">The point.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.Equals(MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.op_Equality(MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.op_Inequality(MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.op_Subtraction(MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.op_Addition(MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.op_Multiply(MPT.Math.Coordinates3D.CartesianCoordinate3D,System.Double)">
            <summary>
            Implements the * operator for a coordinate and a double which represents a multiplier.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianCoordinate3D.op_Division(MPT.Math.Coordinates3D.CartesianCoordinate3D,System.Double)">
            <summary>
            Implements the / operator for a coordinate and a double which represents the denominator.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="denominator">Denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates3D.CartesianOffset3D">
            <summary>
            Represents the difference between 3D Cartesian coordinates I (first) and J (second) in three-dimensional space.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates3D.CartesianOffset3D.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CartesianOffset3D.I">
            <summary>
            Gets or sets the first coordinate value of this Point structure.
            </summary>
            <value>The i.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CartesianOffset3D.J">
            <summary>
            Gets or sets the second coordinate value of this Point structure.
            </summary>
            <value>The j.</value>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.#ctor(MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianCoordinate3D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates3D.CartesianOffset3D"/> struct.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.X">
            <summary>
            Xj - Xi.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.Y">
            <summary>
            Yj - Yi.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.Z">
            <summary>
            Zj - Zi.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.Length">
            <summary>
            The total straight length of the offset.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.ToCartesianCoordinate3D">
            <summary>
            Converts to a single <see cref="T:MPT.Math.Coordinates3D.CartesianCoordinate3D"/> coordinate.
            </summary>
            <returns>CartesianCoordinate3D.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.Equals(MPT.Math.Coordinates3D.CartesianOffset3D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Equality(MPT.Math.Coordinates3D.CartesianOffset3D,MPT.Math.Coordinates3D.CartesianOffset3D)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Inequality(MPT.Math.Coordinates3D.CartesianOffset3D,MPT.Math.Coordinates3D.CartesianOffset3D)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Subtraction(MPT.Math.Coordinates3D.CartesianOffset3D,MPT.Math.Coordinates3D.CartesianOffset3D)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Subtraction(MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianOffset3D)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Subtraction(MPT.Math.Coordinates3D.CartesianOffset3D,MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Addition(MPT.Math.Coordinates3D.CartesianOffset3D,MPT.Math.Coordinates3D.CartesianOffset3D)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Addition(MPT.Math.Coordinates3D.CartesianCoordinate3D,MPT.Math.Coordinates3D.CartesianOffset3D)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Addition(MPT.Math.Coordinates3D.CartesianOffset3D,MPT.Math.Coordinates3D.CartesianCoordinate3D)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Multiply(MPT.Math.Coordinates3D.CartesianOffset3D,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Multiply(System.Double,MPT.Math.Coordinates3D.CartesianOffset3D)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CartesianOffset3D.op_Division(MPT.Math.Coordinates3D.CartesianOffset3D,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">The denominator.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates3D.CylindricalCoordinate">
            <summary>
            A three-dimensional coordinate system that specifies point positions by the distance from a chosen reference axis, the direction from the axis relative to a chosen reference direction, and the distance from a chosen reference plane perpendicular to the axis. 
            The latter distance is given as a positive or negative number depending on which side of the reference plane faces the point.
            </summary>
            <seealso ref="https://en.wikipedia.org/wiki/Cylindrical_coordinate_system"/>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates3D.CylindricalCoordinate.Tolerance">
            <summary>
            Default zero tolerance for operations.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CylindricalCoordinate.Radius">
            <summary>
            Gets the radial length, ρ, which is the Euclidean distance from the z-axis to the point P.
            </summary>
            <value>The radial length.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CylindricalCoordinate.Height">
            <summary>
            Gets the height, z, which is the signed distance from the chosen plane to the point P.
            </summary>
            <value>The height.</value>
        </member>
        <member name="F:MPT.Math.Coordinates3D.CylindricalCoordinate._azimuth">
            <summary>
            The azimuth angle, φ, which lies in the x-y plane sweeping out from the X-axis.
            </summary>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CylindricalCoordinate.Azimuth">
            <summary>
            Gets or sets the azimuth angle, φ, which is the angle between the reference direction on the chosen plane and the line from the origin to the projection of P on the plane.
            </summary>
            <value>The phi.</value>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates3D.SphericalCoordinate" /> struct.
            </summary>
            <param name="radius">The distance from a reference point.</param>
            <param name="height">The height, z, which is the signed distance from the chosen plane to the point P.</param>
            <param name="azimuth">The azimuth angle, φ, which lies in the x-y plane sweeping out from the X-axis [radians].</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.#ctor(System.Double,System.Double,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates3D.SphericalCoordinate" /> struct.
            </summary>
            <param name="radius">The distance from a reference point.</param>
            <param name="height">The height, z, which is the signed distance from the chosen plane to the point P.</param>
            <param name="azimuth">The azimuth angle, φ, which lies in the x-y plane sweeping out from the X-axis.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.AddToHeight(System.Double)">
            <summary>
            Adds the value to the height, z, of the current coordinate.
            </summary>
            <param name="value">The value.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.SubtractFromHeight(System.Double)">
            <summary>
            Subtracts the value from the height, z, of the current coordinate.
            </summary>
            <param name="value">The value.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.MultiplyHeightBy(System.Double)">
            <summary>
            Multiplies the height, z, of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.DivideHeightBy(System.Double)">
            <summary>
            Divides the height, z, of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.changeHeight(System.Double)">
            <summary>
            Changes the height, z, of the current coordinate to the provided height.
            </summary>
            <param name="height">The height.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.AddAngleAzimuthRadians(System.Double)">
            <summary>
            Adds the angle, in radians, to the azimuth angle, φ, of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.SubtractAngleAzimuthRadians(System.Double)">
            <summary>
            Subtracts the angle, in radians, from the azimuth angle, φ, of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.AddAngleAzimuthDegrees(System.Double)">
            <summary>
            Adds the angle, in degrees, to the azimuth angle, φ, of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.SubtractAngleAzimuthDegrees(System.Double)">
            <summary>
            Subtracts the angle, in degrees, from the azimuth angle, φ, of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.MultiplyAngleAzimuthBy(System.Double)">
            <summary>
            Multiplies the azimuth angle, φ, of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.DivideAngleAzimuthBy(System.Double)">
            <summary>
            Divides the azimuth angle, φ, of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.changePhiAngleAzimuthRadians(System.Double)">
            <summary>
            Changes the azimuth angle, φ, of the current coordinate to the provided angle, in radians.
            </summary>
            <param name="angle">The new angle [radians].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.AddToRadius(System.Double)">
            <summary>
            Adds the amount to the radial length of the current coordinate.
            </summary>
            <param name="value">The amount to add to the radial length.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.SubtractFromRadius(System.Double)">
            <summary>
            Subtracts the amount from the radial length of the current coordinate.
            </summary>
            <param name="value">The amount to subtract from the radial length.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.MultiplyRadiusBy(System.Double)">
            <summary>
            Multiplies the radial length of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.DivideRadiusBy(System.Double)">
            <summary>
            Divides the radial length of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.changeRadius(System.Double)">
            <summary>
            Changes the radial length of the current coordinate to the provided radial length.
            </summary>
            <param name="radialLength">The new radial length.</param>
            <returns>CylindricalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.Equals(MPT.Math.Coordinates3D.CylindricalCoordinate)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.op_Equality(MPT.Math.Coordinates3D.CylindricalCoordinate,MPT.Math.Coordinates3D.CylindricalCoordinate)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.op_Inequality(MPT.Math.Coordinates3D.CylindricalCoordinate,MPT.Math.Coordinates3D.CylindricalCoordinate)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.op_Multiply(System.Double,MPT.Math.Coordinates3D.CylindricalCoordinate)">
            <summary>
            Implements the * operator for a coordinate and a double which represents a multiplier.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="coordinate">The coordinate.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.op_Multiply(MPT.Math.Coordinates3D.CylindricalCoordinate,System.Double)">
            <summary>
            Implements the * operator for a coordinate and a double which represents a multiplier.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalCoordinate.op_Division(MPT.Math.Coordinates3D.CylindricalCoordinate,System.Double)">
            <summary>
            Implements the / operator for a coordinate and a double which represents the denominator.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="denominator">The denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates3D.CylindricalOffset">
            <summary>
            Represents the difference between cylindrical coordinates I (first) and J (second) in two-dimensional space.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates3D.CylindricalOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CylindricalOffset.I">
            <summary>
            Gets or sets the first coordinate value.
            </summary>
            <value>The first coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.CylindricalOffset.J">
            <summary>
            Gets or sets the second coordinate value.
            </summary>
            <value>The second coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.#ctor(MPT.Math.Coordinates3D.CylindricalCoordinate,MPT.Math.Coordinates3D.CylindricalCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates3D.CylindricalOffset"/> struct.
            </summary>
            <param name="i">The first coordinate.</param>
            <param name="j">The second coordinate.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.Radius">
            <summary>
            Radius_j - Radius_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.Azimuth">
            <summary>
            Azimuth_j - Azimuth_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.Height">
            <summary>
            Height_j - Height_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.Length">
            <summary>
            The total straight length between the offset points.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.Equals(MPT.Math.Coordinates3D.CylindricalOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.op_Equality(MPT.Math.Coordinates3D.CylindricalOffset,MPT.Math.Coordinates3D.CylindricalOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.op_Inequality(MPT.Math.Coordinates3D.CylindricalOffset,MPT.Math.Coordinates3D.CylindricalOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.op_Subtraction(MPT.Math.Coordinates3D.CylindricalCoordinate,MPT.Math.Coordinates3D.CylindricalOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.op_Subtraction(MPT.Math.Coordinates3D.CylindricalOffset,MPT.Math.Coordinates3D.CylindricalCoordinate)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.op_Addition(MPT.Math.Coordinates3D.CylindricalCoordinate,MPT.Math.Coordinates3D.CylindricalOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.op_Addition(MPT.Math.Coordinates3D.CylindricalOffset,MPT.Math.Coordinates3D.CylindricalCoordinate)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.op_Multiply(MPT.Math.Coordinates3D.CylindricalOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.op_Multiply(System.Double,MPT.Math.Coordinates3D.CylindricalOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.CylindricalOffset.op_Division(MPT.Math.Coordinates3D.CylindricalOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">The denominator.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates3D.ICoordinate3D">
            <summary>
            Interface ICoordinate3D
            </summary>
        </member>
        <member name="T:MPT.Math.Coordinates3D.SphericalCoordinate">
            <summary>
            A coordinate system for three-dimensional space where the position of a point is specified by three numbers: the radial length of that point from a fixed origin, r, its polar angle measured from a fixed zenith direction, θ, and the azimuthal angle, φ, of its orthogonal projection on a reference plane that passes through the origin and is orthogonal to the zenith, measured from a fixed reference direction on that plane. 
            It can be seen as the three-dimensional version of the polar coordinate system.
            </summary>
            <seealso ref="https://en.wikipedia.org/wiki/Spherical_coordinate_system"/>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates3D.SphericalCoordinate.Tolerance">
            <summary>
            Default zero tolerance for operations.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.SphericalCoordinate.Radius">
            <summary>
            Gets the radial length, r.
            </summary>
            <value>The radial length.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.SphericalCoordinate.Inclination">
            <summary>
            Gets or sets the inclination angle, θ, which lies in the vertical plane sweeping out from the Z-axis.
            </summary>
            <value>The theta.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.SphericalCoordinate.Azimuth">
            <summary>
            Gets or sets the azimuth angle, φ, which lies in the x-y plane sweeping out from the X-axis.
            </summary>
            <value>The phi.</value>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates3D.SphericalCoordinate" /> struct.
            </summary>
            <param name="radius">The distance from a reference point.</param>
            <param name="inclination">The polar angle, θ, which lies in the vertical plane sweeping out from the Z-axis [radians].</param>
            <param name="azimuth">The azimuth angle, φ, which lies in the x-y plane sweeping out from the X-axis [radians].</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.#ctor(System.Double,MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates3D.SphericalCoordinate" /> struct.
            </summary>
            <param name="radius">The distance from a reference point.</param>
            <param name="inclination">The polar angle, θ, which lies in the vertical plane sweeping out from the Z-axis.</param>
            <param name="azimuth">The azimuth angle, φ, which lies in the x-y plane sweeping out from the X-axis.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.AddAngleInclinationRadians(System.Double)">
            <summary>
            Adds the angle, in radians, to the inclination angle, θ, of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.SubtractAngleInclinationRadians(System.Double)">
            <summary>
            Subtracts the angle, in radians, from the inclination angle, θ, of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.AddAngleInclinationDegrees(System.Double)">
            <summary>
            Adds the angle, in degrees, to the inclination angle, θ, of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.SubtractAngleInclinationDegrees(System.Double)">
            <summary>
            Subtracts the angle, in degrees, from the inclination angle, θ, of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.MultiplyAngleInclinationBy(System.Double)">
            <summary>
            Multiplies the inclination angle, θ, of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.DivideAngleInclinationBy(System.Double)">
            <summary>
            Divides the inclination angle, θ, of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.changeAngleInclinationRadians(System.Double)">
            <summary>
            Changes the inclination angle, θ, of the current coordinate to the provided angle, in radians.
            </summary>
            <param name="angle">The new angle [radians].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.AddAngleAzimuthRadians(System.Double)">
            <summary>
            Adds the angle, in radians, to the azimuth angle, φ, of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.SubtractAngleAzimuthRadians(System.Double)">
            <summary>
            Subtracts the angle, in radians, from the azimuth angle, φ, of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.AddAngleAzimuthDegrees(System.Double)">
            <summary>
            Adds the angle, in degrees, to the azimuth angle, φ, of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.SubtractAngleAzimuthDegrees(System.Double)">
            <summary>
            Subtracts the angle, in degrees, from the azimuth angle, φ, of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.MultiplyAngleAzimuthBy(System.Double)">
            <summary>
            Multiplies the azimuth angle, φ, of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.DivideAngleAzimuthBy(System.Double)">
            <summary>
            Divides the azimuth angle, φ, of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.changePhiAngleAzimuthRadians(System.Double)">
            <summary>
            Changes the azimuth angle, φ, of the current coordinate to the provided angle, in radians.
            </summary>
            <param name="angle">The new angle [radians].</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.AddToRadialLength(System.Double)">
            <summary>
            Adds the amount to the radius of the current coordinate.
            </summary>
            <param name="value">The amount to add to the radial length.</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.SubtractFromRadialLength(System.Double)">
            <summary>
            Subtracts the amount from the radius of the current coordinate.
            </summary>
            <param name="value">The amount to subtract from the radius.</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.MultiplyRadialLengthBy(System.Double)">
            <summary>
            Multiplies the radius of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.DivideRadialLengthBy(System.Double)">
            <summary>
            Divides the radius of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.changeRadialLength(System.Double)">
            <summary>
            Changes the radius of the current coordinate to the provided radius.
            </summary>
            <param name="radius">The new radius.</param>
            <returns>SphericalCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.Equals(MPT.Math.Coordinates3D.SphericalCoordinate)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.op_Equality(MPT.Math.Coordinates3D.SphericalCoordinate,MPT.Math.Coordinates3D.SphericalCoordinate)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.op_Inequality(MPT.Math.Coordinates3D.SphericalCoordinate,MPT.Math.Coordinates3D.SphericalCoordinate)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.op_Multiply(System.Double,MPT.Math.Coordinates3D.SphericalCoordinate)">
            <summary>
            Implements the * operator for a coordinate and a double which represents a multiplier.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="coordinate">The coordinate.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.op_Multiply(MPT.Math.Coordinates3D.SphericalCoordinate,System.Double)">
            <summary>
            Implements the * operator for a coordinate and a double which represents a multiplier.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalCoordinate.op_Division(MPT.Math.Coordinates3D.SphericalCoordinate,System.Double)">
            <summary>
            Implements the / operator for a coordinate and a double which represents the denominator.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="denominator">The denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates3D.SphericalOffset">
            <summary>
            Represents the difference between spherical coordinates I (first) and J (second) in two-dimensional space.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates3D.SphericalOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.SphericalOffset.I">
            <summary>
            Gets or sets the first coordinate value.
            </summary>
            <value>The first coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates3D.SphericalOffset.J">
            <summary>
            Gets or sets the second coordinate value.
            </summary>
            <value>The second coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.#ctor(MPT.Math.Coordinates3D.SphericalCoordinate,MPT.Math.Coordinates3D.SphericalCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates3D.SphericalOffset"/> struct.
            </summary>
            <param name="i">The first coordinate.</param>
            <param name="j">The second coordinate.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.Radius">
            <summary>
            Radius_j - Radius_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.Azimuth">
            <summary>
            Azimuth_j - Azimuth_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.Inclination">
            <summary>
            Declination_j - Declination_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.Length">
            <summary>
            The total straight length between the offset points.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.Equals(MPT.Math.Coordinates3D.SphericalOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.op_Equality(MPT.Math.Coordinates3D.SphericalOffset,MPT.Math.Coordinates3D.SphericalOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.op_Inequality(MPT.Math.Coordinates3D.SphericalOffset,MPT.Math.Coordinates3D.SphericalOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.op_Subtraction(MPT.Math.Coordinates3D.SphericalCoordinate,MPT.Math.Coordinates3D.SphericalOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.op_Subtraction(MPT.Math.Coordinates3D.SphericalOffset,MPT.Math.Coordinates3D.SphericalCoordinate)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.op_Addition(MPT.Math.Coordinates3D.SphericalCoordinate,MPT.Math.Coordinates3D.SphericalOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.op_Addition(MPT.Math.Coordinates3D.SphericalOffset,MPT.Math.Coordinates3D.SphericalCoordinate)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.op_Multiply(MPT.Math.Coordinates3D.SphericalOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.op_Multiply(System.Double,MPT.Math.Coordinates3D.SphericalOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates3D.SphericalOffset.op_Division(MPT.Math.Coordinates3D.SphericalOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">The denominator.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.Angle">
            <summary>
            Represents an Angle based on a radian value.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.Tolerance">
            <summary>
            Default zero tolerance for operations.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.Radians">
            <summary>
            The angle as radians, which is a value between -π (clockwise) and +π (counter-clockwise).
            </summary>
            <value>The radians.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.ClockwiseRadians">
            <summary>
            The angle as clockwise (inverted) radians, which is a value between -π (counter-clockwise) and +π (clockwise).
            </summary>
            <value>The clockwise radians.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.Degrees">
            <summary>
            The angle as degrees, which is a value between -180 (clockwise) and +180 (counter-clockwise).
            </summary>
            <value>The degree.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.Angle.ClockwiseDegrees">
            <summary>
            The angle as clockwise (inverted) degrees, which is a value between -180 (counter-clockwise) and +180 (clockwise).
            </summary>
            <value>The clockwise degree.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.Angle" /> struct.
            </summary>
            <param name="radians">The radian value of the angle.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CreateFromRadian(System.Double,System.Double)">
            <summary>
            Creates an <see cref="T:MPT.Math.Coordinates.Angle" /> from a radian value.
            </summary>
            <param name="radians">The radian value of the angle.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CreateFromDegree(System.Double,System.Double)">
            <summary>
            Creates an <see cref="T:MPT.Math.Coordinates.Angle" /> from a degree value.
            </summary>
            <param name="degrees">The degree value of the angle.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CreateFromVector(MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Creates an <see cref="T:MPT.Math.Coordinates.Angle" /> from a direction vector.
            </summary>
            <param name="direction">The direction vector of the angle.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The degrees.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.AsDegrees(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the positive angle [degrees] from the x-axis, counter-clockwise, of the coordinates.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.AsDegrees(System.Double,System.Double)">
            <summary>
            Returns the positive angle [degrees] from the x-axis, counter-clockwise, of the coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.AsRadians(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the positive angle [degrees] from the x-axis, counter-clockwise, of the coordinates.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.AsRadians(System.Double,System.Double)">
            <summary>
            Returns the positive angle [radians] from the x-axis, counter-clockwise, of the coordinates.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.WrapAngleWithinPositiveNegativePi(System.Double,System.Double)">
            <summary>
            Reduces a given angle to a value between -π and +π radians.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.WrapAngleWithinTwoPi(System.Double,System.Double)">
            <summary>
            Reduces a given angle to a value between 0 and 2π radians, matching the sign of the angle.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.GetDirectionVector">
            <summary>
            Gets the direction vector, which is a normalized vector pointing to the direction of this angle.
            </summary>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.RotateVector(MPT.Math.Vectors.Vector)">
            <summary>
            Rotates the given Vector around the zero point.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <returns>The rotated vector.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.OffsetFrom(MPT.Math.Coordinates.Angle)">
            <summary>
            Returns the angular offset of the current angle from the provided angle.
            i.e. the current angle subtracting the provided angle.
            </summary>
            <param name="angleI">The angle i.</param>
            <returns>AngularOffset.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Equality(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Equality(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the == operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Equality(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the == operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Inequality(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Inequality(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the != operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Inequality(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the != operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThan(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThan(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThan(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThan(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThan(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThan(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThanOrEqual(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThanOrEqual(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_GreaterThanOrEqual(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThanOrEqual(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThanOrEqual(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_LessThanOrEqual(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Addition(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Addition(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the operator + for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Addition(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the operator + for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Subtraction(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Subtraction(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the operator - for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Subtraction(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the operator - for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Multiply(System.Double,MPT.Math.Coordinates.Angle)">
            <summary>
            Implements the * operator for an angle and a double which represents a multiplier.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="angle">The angle.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Multiply(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the * operator for an angle and a double which represents a multiplier.
            </summary>
            <param name="angle">The angle.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Division(MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Implements the / operator for an angle and a double which represents the denominator.
            </summary>
            <param name="angle">The angle.</param>
            <param name="denominator">The denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Explicit(MPT.Math.Coordinates.Angle)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:MPT.Math.Coordinates.Angle" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="a">Angle a.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.op_Implicit(System.Double)~MPT.Math.Coordinates.Angle">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:MPT.Math.Coordinates.Angle" />.
            </summary>
            <param name="radian">Angle in radians.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.Equals(MPT.Math.Coordinates.Angle)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CompareTo(MPT.Math.Coordinates.Angle)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.Angle.CompareTo(System.Double)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.AngularOffset">
            <summary>
            Represents the angular difference between angles I (first) and J (second) in one-dimensional space.
            Implements the <see cref="T:System.IEquatable`1" />
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.AngularOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.AngularOffset.I">
            <summary>
            Gets or sets the first angular value.
            </summary>
            <value>The first angle.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.AngularOffset.J">
            <summary>
            Gets or sets the second angular value.
            </summary>
            <value>The second angle.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.#ctor(MPT.Math.Coordinates.Angle,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.AngularOffset" /> struct.
            </summary>
            <param name="i">The first angle.</param>
            <param name="j">The second angle.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.ToAngle">
            <summary>
            Converts to a single value.
            </summary>
            <returns>double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Explicit(MPT.Math.Coordinates.AngularOffset)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:MPT.Math.Coordinates.AngularOffset" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="a">Angle a.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Implicit(System.Double)~MPT.Math.Coordinates.AngularOffset">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:MPT.Math.Coordinates.AngularOffset" />.
            </summary>
            <param name="radian">Angle in radians.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.Delta">
            <summary>
            j - i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.LengthChord(System.Double)">
            <summary>
            The total straight length of the offset.
            </summary>
            <param name="radius">The radius to use with the angular offset.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.LengthArc(System.Double)">
            <summary>
            The total arc length of the offset.
            </summary>
            <param name="radius">The radius to use with the angular offset.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Equality(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Equality(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the == operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Inequality(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Inequality(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the != operator for an angle and a double which represents radians.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThan(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThan(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThan(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThan(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThan(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThan(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThanOrEqual(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThanOrEqual(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_GreaterThanOrEqual(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThanOrEqual(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThanOrEqual(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_LessThanOrEqual(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Angle a.</param>
            <param name="b">Angle b, in radians.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Subtraction(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Subtraction(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="angle1">The angle1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Subtraction(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="angle2">The angle2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Addition(MPT.Math.Coordinates.AngularOffset,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Addition(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="angle1">The angle1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Addition(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="angle2">The angle2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Multiply(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Multiply(System.Double,MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.op_Division(MPT.Math.Coordinates.AngularOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">Denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.Equals(MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.CompareTo(MPT.Math.Coordinates.AngularOffset)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.AngularOffset.CompareTo(System.Double)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.CartesianCoordinate">
            <summary>
            A two-dimensional coordinate system that specifies each point uniquely in a plane by a set of numerical coordinates, which are the signed distances to the point from two fixed perpendicular oriented lines, measured in the same unit of length.
            </summary>
            <seealso ref="https://en.wikipedia.org/wiki/Cartesian_coordinate_system"/>
            <seealso ref="https://en.wikipedia.org/wiki/Euclidean_space"/>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianCoordinate.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianCoordinate.X">
            <summary>
            Gets the x-coordinate.
            </summary>
            <value>The x-coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianCoordinate.Y">
            <summary>
            Gets the y-coordinate.
            </summary>
            <value>The y-coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.CartesianCoordinate"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.CrossProduct(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the cross product/determinant of the coordinates.
            x1*y2 - x2*y1
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.DotProduct(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the dot product of the coordinates.
            x1*x2 + y1*y2
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.OffsetFrom(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Returns the cartesian offset of the current coordinate from the provided coordinate.
            i.e. the current coordinate subtracting the provided coordinate.
            </summary>
            <param name="coordinateI">The coordinate i.</param>
            <returns>AngularOffset.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.RotateAboutPoint(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Rotates the the specified coordinate by the specified angle about a point.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="centerOfRotation">The center of rotation.</param>
            <param name="degreeRadians">The degree [radians].</param>
            <returns>MPT.Math.Coordinates.CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Rotate(MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Rotates the specified coordinate by the specifed angle about the origin.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="degreeRadians">The degree [radians].</param>
            <returns>MPT.Math.Coordinates.CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Equality(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Inequality(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Subtraction(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Addition(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="a">Coordinate a.</param>
            <param name="b">Coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Multiply(MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Multiply(System.Double,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="coordinate">The coordinate.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.op_Division(MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <param name="denominator">The denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Equals(MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianCoordinate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.CartesianOffset">
            <summary>
            Represents the difference between Cartesian coordinates I (first) and J (second) in two-dimensional space.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianOffset.I">
            <summary>
            Gets or sets the first coordinate value.
            </summary>
            <value>The first coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.CartesianOffset.J">
            <summary>
            Gets or sets the second coordinate value.
            </summary>
            <value>The second coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.CartesianOffset"/> struct.
            </summary>
            <param name="i">The first coordinate.</param>
            <param name="j">The second coordinate.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.ToCartesianCoordinate">
            <summary>
            Converts to a single <see cref="T:MPT.Math.Coordinates.CartesianCoordinate"/> coordinate.
            </summary>
            <returns>CartesianCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.X">
            <summary>
            Xj - Xi.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.Y">
            <summary>
            Yj - Yi.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.Length">
            <summary>
            The total straight length of the offset.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.Equals(MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Equality(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Inequality(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Subtraction(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Subtraction(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Subtraction(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Addition(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Addition(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Addition(MPT.Math.Coordinates.CartesianOffset,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Multiply(MPT.Math.Coordinates.CartesianOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Multiply(System.Double,MPT.Math.Coordinates.CartesianOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.CartesianOffset.op_Division(MPT.Math.Coordinates.CartesianOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">Denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.ICoordinate">
            <summary>
            Interface ICoordinate
            </summary>
        </member>
        <member name="T:MPT.Math.Coordinates.LinearOffset">
            <summary>
            Represents the linear difference between coordinates I (first) and J (second) in one-dimensional space.
            Implements the <see cref="T:System.IEquatable`1" />
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.LinearOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.LinearOffset.I">
            <summary>
            Gets or sets the first coordinate value.
            </summary>
            <value>The first coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.LinearOffset.J">
            <summary>
            Gets or sets the second coordinate value.
            </summary>
            <value>The second coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.LinearOffset"/> struct.
            </summary>
            <param name="i">The first coordinate.</param>
            <param name="j">The second coordinate.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.ToValue">
            <summary>
            Converts to a single value.
            </summary>
            <returns>double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Explicit(MPT.Math.Coordinates.LinearOffset)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:MPT.Math.Coordinates.LinearOffset" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="a">Angle a.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Implicit(System.Double)~MPT.Math.Coordinates.LinearOffset">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:MPT.Math.Coordinates.LinearOffset" />.
            </summary>
            <param name="distance">Offset distance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.Delta">
            <summary>
            j - i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.Length">
            <summary>
            The total straight length of the offset.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Equality(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Equality(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Equality(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Inequality(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Inequality(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Inequality(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThan(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThan(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Offset a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThan(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the &gt; operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThan(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThan(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Offset a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThan(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the &lt; operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThanOrEqual(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThanOrEqual(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Offset a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_GreaterThanOrEqual(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the &gt;= operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThanOrEqual(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThanOrEqual(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Offset a, in radians.</param>
            <param name="b">Angle b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_LessThanOrEqual(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the &lt;= operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Subtraction(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Subtraction(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Subtraction(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Addition(MPT.Math.Coordinates.LinearOffset,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Addition(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Addition(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Multiply(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Multiply(System.Double,MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.op_Division(MPT.Math.Coordinates.LinearOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">Denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.Equals(MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.CompareTo(MPT.Math.Coordinates.LinearOffset)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.LinearOffset.CompareTo(System.Double)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance precedes <paramref name="other">other</paramref> in the sort order.
            Zero
            This instance occurs in the same position in the sort order as <paramref name="other">other</paramref>.
            Greater than zero
            This instance follows <paramref name="other">other</paramref> in the sort order.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.PolarCoordinate">
            <summary>
            A two-dimensional coordinate system in which each point on a plane is determined by a distance from a reference point and an angle from a reference direction. 
            Polar coordinates are points labeled (r,θ) and plotted on a polar grid.
            </summary>
            <seealso ref="https://en.wikipedia.org/wiki/Polar_coordinate_system"/>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.PolarCoordinate.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.PolarCoordinate.Radius">
            <summary>
            Gets the radius, r.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.PolarCoordinate.Azimuth">
            <summary>
            Gets the azimuth angle, φ,.
            </summary>
            <value>The azimuth.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.#ctor(System.Double,MPT.Math.Coordinates.Angle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.PolarCoordinate"/> struct.
            </summary>
            <param name="radius">The distance from a reference point.</param>
            <param name="azimuth">The angle from a reference direction.</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.PolarCoordinate"/> struct.
            </summary>
            <param name="radius">The distance from a reference point.</param>
            <param name="azimuth">The angle from a reference direction [radians].</param>
            <param name="tolerance">The tolerance to be used in relating coordinates.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.AddAngleAzimuthRadians(System.Double)">
            <summary>
            Adds the angle, in radians, to the angle of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.SubtractAngleAzimuthRadians(System.Double)">
            <summary>
            Subtracts the angle, in radians, from the angle of the current coordinate.
            </summary>
            <param name="angle">The angle [radians].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.AddAngleAzimuthDegrees(System.Double)">
            <summary>
            Adds the angle, in degrees, to the angle of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.SubtractAngleAzimuthDegrees(System.Double)">
            <summary>
            Subtracts the angle, in degrees, from the angle of the current coordinate.
            </summary>
            <param name="angle">The angle [degrees].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.MultiplyAngleAzimuthBy(System.Double)">
            <summary>
            Multiplies the angle of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.DivideAngleAzimuthBy(System.Double)">
            <summary>
            Divides the angle of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.changeAngleAzimuthRadians(System.Double)">
            <summary>
            Changes the angle of the current coordinate to the provided angle, in radians.
            </summary>
            <param name="angle">The new angle [radians].</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.AddToRadius(System.Double)">
            <summary>
            Adds the amount to the radius of the current coordinate.
            </summary>
            <param name="value">The amount to add to the radius.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.SubtractFromRadius(System.Double)">
            <summary>
            Subtracts the amount from the radius of the current coordinate.
            </summary>
            <param name="value">The amount to subtract from the radius.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.MultiplyRadiusBy(System.Double)">
            <summary>
            Multiplies the radius of the current coordinate by the amount.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.DivideRadiusBy(System.Double)">
            <summary>
            Divides the radius of the current coordinate by the amount.
            </summary>
            <param name="denominator">The denominator value.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.changeRadius(System.Double)">
            <summary>
            Changes the radius of the current coordinate to the provided radius.
            </summary>
            <param name="radius">The new radius.</param>
            <returns>PolarCoordinate.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.Equals(MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Equality(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Polar coordinate a.</param>
            <param name="b">Polar coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Inequality(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Polar coordinate a.</param>
            <param name="b">Polar coordinate b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Multiply(MPT.Math.Coordinates.PolarCoordinate,System.Double)">
            <summary>
            Implements the * operator for a polar coordinate and a double which represents a multiplier.
            </summary>
            <param name="coordinate">Polar coordinate.</param>
            <param name="multiplier">Multiplier value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Multiply(System.Double,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the * operator for a polar coordinate and a double which represents a multiplier.
            </summary>
            <param name="multiplier">Multiplier value.</param>
            <param name="coordinate">Polar coordinate.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarCoordinate.op_Division(MPT.Math.Coordinates.PolarCoordinate,System.Double)">
            <summary>
            Implements the / operator for a polar coordinate and a double which represents a denominator.
            </summary>
            <param name="coordinate">Polar coordinate.</param>
            <param name="denominator">The denominator value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Coordinates.PolarOffset">
            <summary>
            Represents the difference between polar coordinates I (first) and J (second) in two-dimensional space.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Coordinates.PolarOffset.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.PolarOffset.I">
            <summary>
            Gets or sets the first coordinate value.
            </summary>
            <value>The first coordinate.</value>
        </member>
        <member name="P:MPT.Math.Coordinates.PolarOffset.J">
            <summary>
            Gets or sets the second coordinate value.
            </summary>
            <value>The second coordinate.</value>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.#ctor(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Coordinates.CartesianOffset"/> struct.
            </summary>
            <param name="i">The first coordinate.</param>
            <param name="j">The second coordinate.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Radius">
            <summary>
            Radius_j - Radius_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Azimuth">
            <summary>
            Azimuth_j - Azimuth_i.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Length">
            <summary>
            The total straight length between the offset points.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Equals(MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Equality(MPT.Math.Coordinates.PolarOffset,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Inequality(MPT.Math.Coordinates.PolarOffset,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">Offset a.</param>
            <param name="b">Offset b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Subtraction(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Subtraction(MPT.Math.Coordinates.PolarOffset,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Addition(MPT.Math.Coordinates.PolarCoordinate,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="point1">The point1.</param>
            <param name="offset2">The offset2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Addition(MPT.Math.Coordinates.PolarOffset,MPT.Math.Coordinates.PolarCoordinate)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="offset1">The offset1.</param>
            <param name="point2">The point2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Multiply(MPT.Math.Coordinates.PolarOffset,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Multiply(System.Double,MPT.Math.Coordinates.PolarOffset)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Coordinates.PolarOffset.op_Division(MPT.Math.Coordinates.PolarOffset,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="offset">The offset.</param>
            <param name="denominator">The denominator.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Helper">
            <summary>
            Class Helper.
            </summary>
        </member>
        <member name="M:MPT.Math.Helper.GetTolerance``2(``0,``1,System.Double)">
            <summary>
            Gets the tolerance between two items.
            This is the maximum defined, or the overwrite, if provided.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.ITolerance">
            <summary>
            Interface ITolerance
            </summary>
        </member>
        <member name="P:MPT.Math.ITolerance.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="T:MPT.Math.Matrices.Matrix">
            <summary>
            Struct Matrix
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Matrices.Matrix.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Matrices.Matrix.DimensionSize">
            <summary>
            Gets the size of the dimension.
            </summary>
            <value>The size of the dimension.</value>
        </member>
        <member name="F:MPT.Math.Matrices.Matrix._matrix">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="P:MPT.Math.Matrices.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Double"/> with the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Matrices.Matrix.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Matrices.Matrix"/> struct.
            </summary>
            <param name="dimensionSize">Size of the dimension.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Matrices.Matrix.GetDeterminant">
            <summary>
            Gets the determinant.
            </summary>
            <returns>System.Double.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MPT.Math.Matrices.Matrix.Equals(MPT.Math.Matrices.Matrix)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Matrices.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Matrices.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Matrices.Matrix.op_Equality(MPT.Math.Matrices.Matrix,MPT.Math.Matrices.Matrix)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Matrices.Matrix.op_Inequality(MPT.Math.Matrices.Matrix,MPT.Math.Matrices.Matrix)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Matrices.Matrix.op_Addition(MPT.Math.Matrices.Matrix,MPT.Math.Matrices.Matrix)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="mat1">The mat1.</param>
            <param name="mat2">The mat2.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:MPT.Math.Matrices.Matrix.op_Subtraction(MPT.Math.Matrices.Matrix,MPT.Math.Matrices.Matrix)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="mat1">The mat1.</param>
            <param name="mat2">The mat2.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:MPT.Math.Numbers">
            <summary>
            Contains static methods dealing generically with numbers.
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.ZeroTolerance">
            <summary>
            Default zero tolerance for operations.
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.Pi">
            <summary>
            Represents the value of pi.
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.TwoPi">
            <summary>
            Represents the value of pi times two.
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.PiOver2">
            <summary>
            Represents the value of pi divided by two.
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.PiOver4">
            <summary>
            Represents the value of pi divided by four.
            </summary>
        </member>
        <member name="F:MPT.Math.Numbers.E">
            <summary>
            Represents the mathematical constant e.
            </summary>
        </member>
        <member name="M:MPT.Math.Numbers.Log10E">
            <summary>
            Represents the log base ten of e.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Log2E">
            <summary>
            Represents the log base two of e.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.GoldenRatio">
            <summary>
            The golden ratio, also known as the divine proportion, golden mean, or golden section, is a number often encountered when taking the ratios of distances in simple geometric figures such as the pentagon, pentagram, decagon and dodecahedron.
            It is denoted phi and is approximately 1.618033988749...
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsPositiveSign(System.Double,System.Double)">
            <summary>
            Value is greater than the zero-tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is positive sign] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsNegativeSign(System.Double,System.Double)">
            <summary>
            Value is less than the zero-tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is negative sign] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsZeroSign(System.Double,System.Double)">
            <summary>
            Value is within the absolute value of the zero-tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is zero sign] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Value is equal to the provided value within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is equal to] [the specified value1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsGreaterThan(System.Double,System.Double,System.Double)">
            <summary>
            Value is greater than the provided value, within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is greater than] [the specified value1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsLessThan(System.Double,System.Double,System.Double)">
            <summary>
            Value is less than the provided value, within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is less than] [the specified value1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Values are equal within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsGreaterThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value2].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value2]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsLessThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value2].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value2]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Max``1(``0[])">
            <summary>
            Determines the maximum of the parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentException">Argument cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Array has not been dimensioned.</exception>
        </member>
        <member name="M:MPT.Math.Numbers.Min``1(``0[])">
            <summary>
            Determines the minimum of the parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentException">Argument cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Array has not been dimensioned.</exception>
        </member>
        <member name="M:MPT.Math.Numbers.IsOdd(System.Int32)">
            <summary>
            Value is an odd number.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is odd; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsEven(System.Int32)">
            <summary>
            Value is an even number.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is even; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsPrime(System.Int32)">
            <summary>
            A whole number greater than 1, whose only two whole-number factors are 1 and itself.
            Uses the 'Sieve of Eratosthenes', which is very efficient for solving small primes (i.e. &lt; 10,000,000,000).
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is prime; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.IsComposite(System.Int32)">
            <summary>
            A whole number that can be divided evenly by numbers other than 1 or itself.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is composite; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.LastDigit(System.Int32)">
            <summary>
            Returns the last digit without sign of the value provided.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.DecimalPlaces(System.Double,System.Boolean)">
            <summary>
            Number of decimal places.
            Note that for non-scientific notation, the maximum that may be returned is (# decimal places) &lt;= 15 - (# whole numbers, not including leading 0s).
            </summary>
            <param name="value">The value.</param>
            <param name="limitForRounding">If set to <c>true</c>, results are limited to a range that is appropriate for rounding methods (0 &lt;= value &lt;= 15).
            Not using this limit may result in a thrown exception when rounding.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.SignificantFigures(System.Double)">
            <summary>
            Number of significant figures.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Squared(System.Int32)">
            <summary>
            Returns the value squared..
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Squared(System.Double)">
            <summary>
            Returns the value squared.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Cubed(System.Int32)">
            <summary>
            Returns the value cubed.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Cubed(System.Double)">
            <summary>
            Returns the value cubed.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Sqrt(System.Double)">
            <summary>
            Returns the square root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.CubeRoot(System.Double)">
            <summary>
            Returns the cube root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Root(System.Double,System.Int32)">
            <summary>
            Returns the root of the number.
            </summary>
            <param name="value">The value.</param>
            <param name="root">The root.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Root(System.Double,System.Double)">
            <summary>
            Returns the root of the number.
            </summary>
            <param name="value">The value.</param>
            <param name="root">The root.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Pow(System.Double,System.Double)">
            <summary>
            Returns the value raised to the power provided.
            </summary>
            <param name="value">The value.</param>
            <param name="power">The power.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.DivideByZeroException"></exception>
        </member>
        <member name="M:MPT.Math.Numbers.Factorial(System.Int32)">
            <summary>
            The product of an integer and all the integers below it; e.g., factorial four ( 4! ) is equal to 24.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.PlusMinus(System.Int32,System.Int32)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue">The base value.</param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:MPT.Math.Numbers.PlusMinus(System.Double,System.Double)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue">The base value.</param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:MPT.Math.Numbers.Limit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value.
            If value is greater than max, max will be returned.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
            <exception cref="T:System.ArgumentException">Max limit, {max}, is less than the min limit, {min}</exception>
        </member>
        <member name="M:MPT.Math.Numbers.Limit(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value.
            If value is greater than max, max will be returned.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
            <exception cref="T:System.ArgumentException">Max limit, {max}, is less than the min limit, {min}</exception>
        </member>
        <member name="M:MPT.Math.Numbers.RoundToSignificantDigits(System.Double,System.Int32)">
            <summary>
            Rounds to significant digits.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The number of significant digits.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Numbers.RemoveTrailingZeroes(System.Decimal)">
            <summary>
            Removes trailing zeros from value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="T:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary">
            <summary>
            Contains extension methods dealing generically with numbers. 
            </summary>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsPositiveSign(System.Int32)">
            <summary>
            Value is greater than 0.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsPositiveSign(System.Double,System.Double)">
            <summary>
            Value is greater than the zero-tolerance.
            </summary>
            <param name="value"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsNegativeSign(System.Int32)">
            <summary>
            Value is less than zero.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsNegativeSign(System.Double,System.Double)">
            <summary>
            Value is less than the zero-tolerance.
            </summary>
            <param name="value"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsZeroSign(System.Double,System.Double)">
            <summary>
            Value is within the absolute value of the zero-tolerance.
            </summary>
            <param name="value"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Value is equal to the provided value within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsGreaterThan(System.Double,System.Double,System.Double)">
            <summary>
            Value is greater than the provided value, within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsLessThan(System.Double,System.Double,System.Double)">
            <summary>
            Value is less than the provided value, within the absolute value of the zero-tolerance.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsGreaterThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is greater than or equal to] [the specified value2].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is greater than or equal to] [the specified value2]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsLessThanOrEqualTo(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is less than or equal to] [the specified value2].
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="tolerance">The tolerance.</param>
            <returns><c>true</c> if [is less than or equal to] [the specified value2]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsOdd(System.Int32)">
            <summary>
            Value is an odd number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsEven(System.Int32)">
            <summary>
            Value is an even number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsPrime(System.Int32)">
            <summary>
            A whole number greater than 1, whose only two whole-number factors are 1 and itself. 
            Uses the 'Sieve of Eratosthenes', which is very efficient for solving small primes (i.e. &lt; 10,000,000,000).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.IsComposite(System.Int32)">
            <summary>
            A whole number that can be divided evenly by numbers other than 1 or itself.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.LastDigit(System.Int32)">
            <summary>
            Returns the last digit without sign of the value provided.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Squared(System.Int32)">
            <summary>
            Returns the value squared..
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Squared(System.Double)">
            <summary>
            Returns the value squared.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Cubed(System.Int32)">
            <summary>
            Returns the value cubed.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Cubed(System.Double)">
            <summary>
            Returns the value cubed.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Sqrt(System.Int32)">
            <summary>
            Returns the square root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Sqrt(System.Double)">
            <summary>
            Returns the square root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.CubeRoot(System.Int32)">
            <summary>
            Returns the cube root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.CubeRoot(System.Double)">
            <summary>
            Returns the cube root of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Root(System.Double,System.Int32)">
            <summary>
            Returns the root of the number.
            </summary>
            <param name="value">The value.</param>
            <param name="root">The root.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Root(System.Double,System.Double)">
            <summary>
            Returns the root of the number.
            </summary>
            <param name="value">The value.</param>
            <param name="root">The root.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Pow(System.Int32,System.Double)">
            <summary>
            Returns the value raised to the power provided.
            </summary>
            <param name="value"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Pow(System.Double,System.Double)">
            <summary>
            Returns the value raised to the power provided.
            </summary>
            <param name="value"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Factorial(System.Int32)">
            <summary>
            The product of an integer and all the integers below it; e.g., factorial four ( 4! ) is equal to 24.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.PlusMinus(System.Int32,System.Int32)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue"></param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.PlusMinus(System.Int32,System.Double)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue"></param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.PlusMinus(System.Double,System.Double)">
            <summary>
            Returns the paired result of adding and subtracting the provided value from the base value.
            </summary>
            <param name="baseValue"></param>
            <param name="plusMinusValue">Value to add and subtract from the base value.</param>
            <returns></returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Limit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. 
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. 
            If value is greater than max, max will be returned.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Limit(System.Int32,System.Double,System.Double)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. 
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. 
            If value is greater than max, max will be returned.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
        </member>
        <member name="M:MPT.Math.NumberTypeExtensions.NumberTypeExtensionLibrary.Limit(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value. 
            If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. 
            If value is greater than max, max will be returned.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>The clamped value.
            If value &gt; max, max will be returned.
            If value &lt; min, min will be returned.
            If min ≤ value ≥ max, value will be returned.</returns>
        </member>
        <member name="T:MPT.Math.Trigonometry.TrigonometryLibrary">
            <summary>
            Library of trigonometric calculations.
            </summary>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Sin(System.Double)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Cos(System.Double)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Tan(System.Double,System.Double)">
            <summary>
            Returns the tangent of the specified angle.
            Returns <see cref="F:System.Double.NegativeInfinity" /> if angle is a multiple of -π/2 or -(3/2)*π.
            Returns <see cref="F:System.Double.PositiveInfinity" /> if angle is a multiple of +π/2 or +(3/2)*π.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.ArcSin(System.Double)">
            <summary>
            Returns the angle whose sine is the specified ratio.
            </summary>
            <param name="ratio">The ratio of 'opposite / hypotenuse'.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.ArcCos(System.Double)">
            <summary>
            Returns the angle whose cosine is the specified ratio.
            </summary>
            <param name="ratio">The ratio of 'adjacent / hypotenuse'.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.ArcTan(System.Double)">
            <summary>
            Returns the angle whose tangent is the specified ratio.
            </summary>
            <param name="ratio">The ratio of 'opposite / adjacent'.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Sec(System.Double,System.Double)">
            <summary>
            Returns the secant of the specified angle.
            Returns <see cref="F:System.Double.NegativeInfinity" /> if angle is a multiple of +/- π/2.
            Returns <see cref="F:System.Double.PositiveInfinity" /> if 0 or angle is a multiple of +/- (3/2)*π.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Csc(System.Double,System.Double)">
            <summary>
            Returns the cosecant of the specified angle.
            Returns <see cref="F:System.Double.NegativeInfinity" /> if angle is a multiple of -π or +2π.
            Returns <see cref="F:System.Double.PositiveInfinity" /> if 0 or angle is a multiple of +π or -2π.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Trigonometry.TrigonometryLibrary.Cot(System.Double,System.Double)">
            <summary>
            Returns the cotangent of the specified angle.
            Returns <see cref="F:System.Double.NegativeInfinity" /> if angle is a multiple of +π or +2π.
            Returns <see cref="F:System.Double.PositiveInfinity" /> if 0 or angle is a multiple of -π or -2π.
            </summary>
            <param name="radians">The angle in radians.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="T:MPT.Math.Vectors.Vector">
            <summary>
            Library of methods related to vectors.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Vectors.Vector.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Vectors.Vector.Xcomponent">
            <summary>
            Gets the x-component of this vector.
            </summary>
            <value>The xcomponent.</value>
        </member>
        <member name="P:MPT.Math.Vectors.Vector.Ycomponent">
            <summary>
            Gets the y-component of this vector.
            </summary>
            <value>The ycomponent.</value>
        </member>
        <member name="F:MPT.Math.Vectors.Vector._location">
            <summary>
            The location
            </summary>
        </member>
        <member name="P:MPT.Math.Vectors.Vector.Location">
            <summary>
            Gets the location of this vector in Euclidean space.
            </summary>
            <value>The location.</value>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Magnitude">
            <summary>
            Length of this vector.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="P:MPT.Math.Vectors.Vector.MagnitudeSquared">
            <summary>
            Gets the square of the length of this vector.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the class with a vector structure.
            </summary>
            <param name="xMagnitude">The x magnitude.</param>
            <param name="yMagnitude">The y magnitude.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.#ctor(System.Double,System.Double,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes the class with a vector structure and a point coinciding with the location of the vector.
            </summary>
            <param name="xMagnitude">The x magnitude.</param>
            <param name="yMagnitude">The y magnitude.</param>
            <param name="location">The location.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.#ctor(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MPT.Math.Vectors.Vector" /> struct.
            </summary>
            <param name="pointI">The starting point, i.</param>
            <param name="pointJ">The ending point, j.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsCollinearSameDirection(MPT.Math.Vectors.Vector)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the same direction.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if [is collinear same direction] [the specified vector]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConcave(MPT.Math.Vectors.Vector)">
            <summary>
            Vectors form a concave angle.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if the specified vector is concave; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsOrthogonal(MPT.Math.Vectors.Vector)">
            <summary>
            Vectors form a 90 degree angle.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if the specified vector is orthogonal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConvex(MPT.Math.Vectors.Vector)">
            <summary>
            Vectors form a convex angle.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if the specified vector is convex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsCollinearOppositeDirection(MPT.Math.Vectors.Vector)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the opposite direction.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if [is collinear opposite direction] [the specified vector]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConcaveInside(MPT.Math.Vectors.Vector)">
            <summary>
            True: The concave side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConvexInside(MPT.Math.Vectors.Vector)">
            <summary>
            True: The convex side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.ConcavityCollinearity(MPT.Math.Vectors.Vector)">
            <summary>
            Returns a value indicating the concavity of the vectors.
            1 = Pointing the same way.
            &gt; 0 = Concave.
            0 = Orthogonal.
            &lt; 0 = Convex.
            -1 = Pointing the exact opposite way.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.DotProduct(MPT.Math.Vectors.Vector)">
            <summary>
            Dot product of two vectors.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.CrossProduct(MPT.Math.Vectors.Vector)">
            <summary>
            Cross-product of two vectors.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Angle">
            <summary>
            Returns the angle [radians] of a vector from the origin axis (x-axis, positive for counter-clockwise).
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Angle(MPT.Math.Vectors.Vector)">
            <summary>
            Returns the angle [radians] between the two vectors, which is a value between 0 and +π.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Area(MPT.Math.Vectors.Vector)">
            <summary>
            Returns the area between two vectors.
            </summary>
            <param name="vector">The vector.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitVector(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Returns a normalized vector.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
            <exception cref="T:System.Exception">Ill-formed vector. Vector magnitude cannot be zero.</exception>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitTangentVector(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Returns the tangent vector to the supplied points.
            </summary>
            <param name="i">First point.</param>
            <param name="j">Second point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.UnitNormalVector(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate,System.Double)">
            <summary>
            Returns a normal vector to a line connecting two points.
            </summary>
            <param name="i">First point.</param>
            <param name="j">Second point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Angle(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Returns the angle [radians] between the two vectors, which is a value between 0 and +π.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsCollinearSameDirection(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the same direction.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if [is collinear same direction] [the specified vector1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConcave(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Vectors form a concave angle.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the specified vector1 is concave; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsOrthogonal(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Vectors form a 90 degree angle.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the specified vector1 is orthogonal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConvex(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Vectors form a convex angle.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if the specified vector1 is convex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsCollinearOppositeDirection(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            True: Segments are parallel, on the same line, oriented in the opposite direction.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if [is collinear opposite direction] [the specified vector1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConcaveInside(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            True: The concave side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if [is concave inside] [the specified vector1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.IsConvexInside(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            True: The convex side of the vector is inside the shape.
            This is determined by the direction of the vector.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="tolerance">Tolerance by which a double is considered to be zero or equal.</param>
            <returns><c>true</c> if [is convex inside] [the specified vector1]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.ConcavityCollinearity(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Returns a value indicating the concavity of the vectors.
            1 = Pointing the same way.
            &gt; 0 = Concave.
            0 = Orthogonal.
            &lt; 0 = Convex.
            -1 = Pointing the exact opposite way.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.getXComponent(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Gets the x component.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.getYComponent(MPT.Math.Coordinates.CartesianCoordinate,MPT.Math.Coordinates.CartesianCoordinate)">
            <summary>
            Gets the y component.
            </summary>
            <param name="i">The i.</param>
            <param name="j">The j.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.getMagnitude(System.Double,System.Double,System.Double)">
            <summary>
            Gets the magnitude.
            </summary>
            <param name="xComponent">The x component.</param>
            <param name="yComponent">The y component.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.Exception">Ill-formed vector. Vector magnitude cannot be zero.</exception>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.getUnitVector(System.Double,System.Double,System.Double)">
            <summary>
            Returns a normalized vector.
            </summary>
            <param name="xComponent">The x component.</param>
            <param name="yComponent">The y component.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>Vector.</returns>
            <exception cref="T:System.Exception">Ill-formed vector. Vector magnitude cannot be zero.</exception>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Equals(MPT.Math.Vectors.Vector)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Equality(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Inequality(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Addition(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Subtraction(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Multiply(MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Multiply(MPT.Math.Vectors.Vector,MPT.Math.Vectors.Vector)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector.op_Division(MPT.Math.Vectors.Vector,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Vectors.Vector3D">
            <summary>
            Represents a vector in 3D space.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="P:MPT.Math.Vectors.Vector3D.Tolerance">
            <summary>
            Tolerance to use in all calculations with double types.
            </summary>
            <value>The tolerance.</value>
        </member>
        <member name="P:MPT.Math.Vectors.Vector3D.Xcomponent">
            <summary>
            Gets the x-component of this vector.
            </summary>
            <value>The xcomponent.</value>
        </member>
        <member name="P:MPT.Math.Vectors.Vector3D.Ycomponent">
            <summary>
            Gets the y-component of this vector.
            </summary>
            <value>The ycomponent.</value>
        </member>
        <member name="P:MPT.Math.Vectors.Vector3D.Zcomponent">
            <summary>
            Gets the z-component of this vector.
            </summary>
            <value>The zcomponent.</value>
        </member>
        <member name="F:MPT.Math.Vectors.Vector3D._location">
            <summary>
            The location
            </summary>
        </member>
        <member name="P:MPT.Math.Vectors.Vector3D.Location">
            <summary>
            Gets the location of this vector in Euclidean space.
            </summary>
            <value>The location.</value>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the class with a vector structure.
            </summary>
            <param name="xMagnitude">The x magnitude.</param>
            <param name="yMagnitude">The y magnitude.</param>
            <param name="zMagnitude">The z magnitude.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.#ctor(System.Double,System.Double,System.Double,MPT.Math.Coordinates3D.CartesianCoordinate3D,System.Double)">
            <summary>
            Initializes the class with a vector structure and a point coinciding with the location of the vector.
            </summary>
            <param name="xMagnitude">The x magnitude.</param>
            <param name="yMagnitude">The y magnitude.</param>
            <param name="zMagnitude">The z magnitude.</param>
            <param name="location">The location.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.Magnitude">
            <summary>
            Length of this vector.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.MagnitudeSquared">
            <summary>
            Gets the square of the length of this vector.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.CrossProduct(MPT.Math.Vectors.Vector3D)">
            <summary>
            Crosses the product.
            </summary>
            <param name="point">The point.</param>
            <returns>Vector3D.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.DotProduct(MPT.Math.Vectors.Vector3D)">
            <summary>
            Dots the product.
            </summary>
            <param name="point">The point.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.Equals(MPT.Math.Vectors.Vector3D)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.op_Equality(MPT.Math.Vectors.Vector3D,MPT.Math.Vectors.Vector3D)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.op_Inequality(MPT.Math.Vectors.Vector3D,MPT.Math.Vectors.Vector3D)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.op_Addition(MPT.Math.Vectors.Vector3D,MPT.Math.Vectors.Vector3D)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.op_Subtraction(MPT.Math.Vectors.Vector3D,MPT.Math.Vectors.Vector3D)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.op_Multiply(MPT.Math.Vectors.Vector3D,System.Double)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.op_Multiply(MPT.Math.Vectors.Vector3D,MPT.Math.Vectors.Vector3D)">
            <summary>
            Implements the * operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.Vector3D.op_Division(MPT.Math.Vectors.Vector3D,System.Double)">
            <summary>
            Implements the / operator.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:MPT.Math.Vectors.VectorLibrary">
            <summary>
            Contains static methods for common vector operations.
            </summary>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.DotProduct(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the dot product of the points.
            x1*x2 + y1*y2
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.CrossProduct(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the cross product/determinant of the points.
            x1*y2 - x2*y1
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.DotProduct(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the dot product of the points.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="z1">The z1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="z2">The z2.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:MPT.Math.Vectors.VectorLibrary.CrossProduct(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the cross product/determinant of the points.
            </summary>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="z1">The z1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="z2">The z2.</param>
            <returns>System.Double.</returns>
        </member>
    </members>
</doc>
